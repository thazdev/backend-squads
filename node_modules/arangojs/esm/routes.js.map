{"version":3,"file":"routes.js","sourceRoot":"","sources":["../../src/routes.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * ```ts\n * import type { Route } from \"arangojs/routes\";\n * ```\n *\n * The \"routes\" module provides route related types and interfaces for\n * TypeScript.\n *\n * @packageDocumentation\n */\nimport * as connections from \"./connection.js\";\nimport * as databases from \"./databases.js\";\nimport * as util from \"./lib/util.js\";\n\n/**\n * Represents an arbitrary route relative to an ArangoDB database.\n */\nexport class Route {\n  protected _db: databases.Database;\n  protected _pathname: string;\n  protected _headers: Headers;\n\n  /**\n   * @internal\n   */\n  constructor(\n    db: databases.Database,\n    pathname: string = \"\",\n    headers: Headers | Record<string, string> = {},\n  ) {\n    if (!pathname) pathname = \"\";\n    else if (pathname.charAt(0) !== \"/\") pathname = `/${pathname}`;\n    this._db = db;\n    this._pathname = pathname;\n    this._headers = headers instanceof Headers ? headers : new Headers(headers);\n  }\n\n  /**\n   * Database this route belongs to.\n   */\n  get database() {\n    return this._db;\n  }\n\n  /**\n   * Path of this route.\n   */\n  get pathname() {\n    return this._pathname;\n  }\n\n  /**\n   * Headers of this route.\n   */\n  get headers() {\n    return this._headers;\n  }\n\n  /**\n   * Creates a new route relative to this route that inherits any of its default\n   * HTTP headers.\n   *\n   * @param pathname - Path relative to this route.\n   * @param headers - Additional headers that will be sent with each request.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const foxx = db.route(\"/my-foxx-service\");\n   * const users = foxx.route(\"/users\");\n   * ```\n   */\n  route(pathname: string, headers?: Headers | Record<string, string>) {\n    return new Route(\n      this._db,\n      util.joinPath(this._pathname, pathname),\n      util.mergeHeaders(this._headers, headers),\n    );\n  }\n\n  /**\n   * Performs an arbitrary HTTP request relative to this route and returns the\n   * server response.\n   *\n   * @param options - Options for performing the request.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const foxx = db.route(\"/my-foxx-service\");\n   * const res = await foxx.request({\n   *   method: \"POST\",\n   *   pathname: \"/users\",\n   *   body: {\n   *     username: \"admin\",\n   *     password: \"hunter2\"\n   *   }\n   * });\n   * ```\n   */\n  request(options: connections.RequestOptions = {}) {\n    const { method = \"GET\", pathname, headers, ...opts } = options;\n    return this._db.request(\n      {\n        ...opts,\n        method: method.toUpperCase(),\n        pathname: util.joinPath(this._pathname, pathname),\n        headers: util.mergeHeaders(this._headers, headers),\n      },\n      false,\n    );\n  }\n\n  /**\n   * Performs a DELETE request against the given path relative to this route\n   * and returns the server response.\n   *\n   * @param pathname - Path relative to this route.\n   * @param search - Query string parameters for this request.\n   * @param headers - Additional headers to send with this request.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const foxx = db.route(\"/my-foxx-service\");\n   * const res = await foxx.delete(\"/users/admin\");\n   * ```\n   */\n  delete(\n    pathname: string,\n    search?: URLSearchParams | Record<string, any>,\n    headers?: Headers | Record<string, string>,\n  ): Promise<connections.ProcessedResponse>;\n  /**\n   * Performs a DELETE request against the given path relative to this route\n   * and returns the server response.\n   *\n   * @param search - Query string parameters for this request.\n   * @param headers - Additional headers to send with this request.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const foxx = db.route(\"/my-foxx-service\");\n   * const user = foxx.roue(\"/users/admin\");\n   * const res = await user.delete();\n   * ```\n   */\n  delete(\n    search?: URLSearchParams | Record<string, any>,\n    headers?: Headers | Record<string, string>,\n  ): Promise<connections.ProcessedResponse>;\n  delete(...args: any[]): Promise<connections.ProcessedResponse> {\n    const pathname = typeof args[0] === \"string\" ? args.shift() : undefined;\n    const [search, headers] = args;\n    return this.request({ method: \"DELETE\", pathname, search, headers });\n  }\n\n  /**\n   * Performs a GET request against the given path relative to this route\n   * and returns the server response.\n   *\n   * @param pathname - Path relative to this route.\n   * @param search - Query string parameters for this request.\n   * @param headers - Additional headers to send with this request.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const foxx = db.route(\"/my-foxx-service\");\n   * const res = await foxx.get(\"/users\", { offset: 10, limit: 5 });\n   * ```\n   */\n  get(\n    pathname: string,\n    search?: URLSearchParams | Record<string, any>,\n    headers?: Headers | Record<string, string>,\n  ): Promise<connections.ProcessedResponse>;\n  /**\n   * Performs a GET request against the given path relative to this route\n   * and returns the server response.\n   *\n   * @param search - Query string parameters for this request.\n   * @param headers - Additional headers to send with this request.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const foxx = db.route(\"/my-foxx-service\");\n   * const users = foxx.route(\"/users\");\n   * const res = await users.get({ offset: 10, limit: 5 });\n   * ```\n   */\n  get(\n    search?: URLSearchParams | Record<string, any>,\n    headers?: Headers | Record<string, string>,\n  ): Promise<connections.ProcessedResponse>;\n  get(...args: any[]): Promise<connections.ProcessedResponse> {\n    const pathname = typeof args[0] === \"string\" ? args.shift() : undefined;\n    const [search, headers] = args;\n    return this.request({ method: \"GET\", pathname, search, headers });\n  }\n\n  /**\n   * Performs a HEAD request against the given path relative to this route\n   * and returns the server response.\n   *\n   * @param pathname - Path relative to this route.\n   * @param search - Query string parameters for this request.\n   * @param headers - Additional headers to send with this request.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const foxx = db.route(\"/my-foxx-service\");\n   * const res = await foxx.head(\"/users\", { offset: 10, limit: 5 });\n   * ```\n   */\n  head(\n    pathname: string,\n    search?: URLSearchParams | Record<string, any>,\n    headers?: Headers | Record<string, string>,\n  ): Promise<connections.ProcessedResponse>;\n  /**\n   * Performs a HEAD request against the given path relative to this route\n   * and returns the server response.\n   *\n   * @param search - Query string parameters for this request.\n   * @param headers - Additional headers to send with this request.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const foxx = db.route(\"/my-foxx-service\");\n   * const users = foxx.route(\"/users\");\n   * const res = await users.head({ offset: 10, limit: 5 });\n   * ```\n   */\n  head(\n    search?: URLSearchParams | Record<string, any>,\n    headers?: Headers | Record<string, string>,\n  ): Promise<connections.ProcessedResponse>;\n  head(...args: any[]): Promise<connections.ProcessedResponse> {\n    const pathname = typeof args[0] === \"string\" ? args.shift() : undefined;\n    const [search, headers] = args;\n    return this.request({ method: \"HEAD\", pathname, search, headers });\n  }\n\n  /**\n   * Performs a PATCH request against the given path relative to this route\n   * and returns the server response.\n   *\n   * @param pathname - Path relative to this route.\n   * @param body - Body of the request object.\n   * @param search - Query string parameters for this request.\n   * @param headers - Additional headers to send with this request.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const foxx = db.route(\"/my-foxx-service\");\n   * const res = await foxx.patch(\"/users/admin\", { password: \"admin\" });\n   * ```\n   */\n  patch(\n    pathname: string,\n    body?: any,\n    search?: URLSearchParams | Record<string, any>,\n    headers?: Headers | Record<string, string>,\n  ): Promise<connections.ProcessedResponse>;\n  /**\n   * Performs a PATCH request against the given path relative to this route\n   * and returns the server response.\n   *\n   * **Note**: `body` must not be a `string`.\n   *\n   * @param body - Body of the request object. Must not be a string.\n   * @param search - Query string parameters for this request.\n   * @param headers - Additional headers to send with this request.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const foxx = db.route(\"/my-foxx-service\");\n   * const user = foxx.route(\"/users/admin\")\n   * const res = await user.patch({ password: \"admin\" });\n   * ```\n   */\n  patch(\n    body?: any,\n    search?: URLSearchParams | Record<string, any>,\n    headers?: Headers | Record<string, string>,\n  ): Promise<connections.ProcessedResponse>;\n  patch(...args: any[]): Promise<connections.ProcessedResponse> {\n    const pathname = typeof args[0] === \"string\" ? args.shift() : undefined;\n    const [body, search, headers] = args;\n    return this.request({ method: \"PATCH\", pathname, body, search, headers });\n  }\n\n  /**\n   * Performs a POST request against the given path relative to this route\n   * and returns the server response.\n   *\n   * @param pathname - Path relative to this route.\n   * @param body - Body of the request object.\n   * @param search - Query string parameters for this request.\n   * @param headers - Additional headers to send with this request.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const foxx = db.route(\"/my-foxx-service\");\n   * const res = await foxx.post(\"/users\", {\n   *   username: \"admin\",\n   *   password: \"hunter2\"\n   * });\n   * ```\n   */\n  post(\n    pathname: string,\n    body?: any,\n    search?: URLSearchParams | Record<string, any>,\n    headers?: Headers | Record<string, string>,\n  ): Promise<connections.ProcessedResponse>;\n  /**\n   * Performs a POST request against the given path relative to this route\n   * and returns the server response.\n   *\n   * **Note**: `body` must not be a `string`.\n   *\n   * @param body - Body of the request object. Must not be a string.\n   * @param search - Query string parameters for this request.\n   * @param headers - Additional headers to send with this request.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const foxx = db.route(\"/my-foxx-service\");\n   * const users = foxx.route(\"/users\");\n   * const res = await users.post({\n   *   username: \"admin\",\n   *   password: \"hunter2\"\n   * });\n   * ```\n   */\n  post(\n    body?: any,\n    search?: URLSearchParams | Record<string, any>,\n    headers?: Headers | Record<string, string>,\n  ): Promise<connections.ProcessedResponse>;\n  post(...args: any[]): Promise<connections.ProcessedResponse> {\n    const pathname = typeof args[0] === \"string\" ? args.shift() : undefined;\n    const [body, search, headers] = args;\n    return this.request({ method: \"POST\", pathname, body, search, headers });\n  }\n\n  /**\n   * Performs a PUT request against the given path relative to this route\n   * and returns the server response.\n   *\n   * @param pathname - Path relative to this route.\n   * @param body - Body of the request object.\n   * @param search - Query string parameters for this request.\n   * @param headers - Additional headers to send with this request.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const foxx = db.route(\"/my-foxx-service\");\n   * const res = await foxx.put(\"/users/admin/password\", { password: \"admin\" });\n   * ```\n   */\n  put(\n    pathname: string,\n    body?: any,\n    search?: URLSearchParams | Record<string, any>,\n    headers?: Headers | Record<string, string>,\n  ): Promise<connections.ProcessedResponse>;\n  /**\n   * Performs a PUT request against the given path relative to this route\n   * and returns the server response.\n   *\n   * **Note**: `body` must not be a `string`.\n   *\n   * @param body - Body of the request object. Must not be a string.\n   * @param search - Query string parameters for this request.\n   * @param headers - Additional headers to send with this request.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const foxx = db.route(\"/my-foxx-service\");\n   * const password = foxx.route(\"/users/admin/password\");\n   * const res = await password.put({ password: \"admin\" });\n   * ```\n   */\n  put(\n    body?: any,\n    search?: URLSearchParams | Record<string, any>,\n    headers?: Headers | Record<string, string>,\n  ): Promise<connections.ProcessedResponse>;\n  put(...args: any[]): Promise<connections.ProcessedResponse> {\n    const pathname = typeof args[0] === \"string\" ? args.shift() : undefined;\n    const [body, search, headers] = args;\n    return this.request({ method: \"PUT\", pathname, body, search, headers });\n  }\n}\n"]}