{"version":3,"file":"administration.js","sourceRoot":"","sources":["../../src/administration.ts"],"names":[],"mappings":"AAAA;;;;;;;;GAQG;;AAkaH,YAAY","sourcesContent":["/**\n * ```ts\n * import type { VersionInfo } from \"arangojs/administration\";\n * ```\n *\n * The \"administration\" module provides types for database administration.\n *\n * @packageDocumentation\n */\n\n//#region Administrative operation options\n/**\n * Options for compacting all databases on the server.\n */\nexport type CompactOptions = {\n  /**\n   * Whether compacted data should be moved to the minimum possible level.\n   *\n   * Default: `false`.\n   */\n  changeLevel?: boolean;\n  /**\n   * Whether to compact the bottom-most level of data.\n   *\n   * Default: `false`.\n   */\n  compactBottomMostLevel?: boolean;\n};\n//#endregion\n\n//#region Administrative operation results\n/**\n * Result of retrieving database version information.\n */\nexport type VersionInfo = {\n  /**\n   * Value identifying the server type, i.e. `\"arango\"`.\n   */\n  server: string;\n  /**\n   * ArangoDB license type or \"edition\".\n   */\n  license: \"community\" | \"enterprise\";\n  /**\n   * ArangoDB server version.\n   */\n  version: string;\n  /**\n   * Additional information about the ArangoDB server.\n   */\n  details?: { [key: string]: string };\n};\n\n/**\n * Information about the storage engine.\n */\nexport type EngineInfo = {\n  /**\n   * Endianness of the storage engine.\n   */\n  endianness?: \"little\" | \"big\";\n  /**\n   * Name of the storage engine.\n   */\n  name: string;\n  /**\n   * Features supported by the storage engine.\n   */\n  supports?: {\n    /**\n     * Index types supported by the storage engine.\n     */\n    indexes?: string[];\n    /**\n     * Aliases supported by the storage engine.\n     */\n    aliases?: {\n      /**\n       * Index type aliases supported by the storage engine.\n       */\n      indexes?: Record<string, string>;\n    };\n  };\n};\n\n/**\n * Performance and resource usage information about the storage engine.\n */\nexport type EngineStatsInfo = Record<\n  string,\n  string | number | Record<string, number | string>\n>;\n\n/**\n * Information about the server license.\n */\nexport type LicenseInfo = {\n  /**\n   * Properties of the license.\n   */\n  features: {\n    /**\n     * The timestamp of the expiration date of the license in seconds since the\n     * Unix epoch.\n     */\n    expires?: number;\n  };\n  /**\n   * The hash value of the license.\n   */\n  hash: string;\n  /**\n   * The encrypted license key in base 64 encoding, or `\"none\"` when running\n   * in the Community Edition.\n   */\n  license?: string;\n  /**\n   * The status of the installed license.\n   *\n   * - `\"good\"`: The license is valid for more than 2 weeks.\n   *\n   * - `\"expiring\"`: The license is valid for less than 2 weeks.\n   *\n   * - `\"expired\"`: The license has expired.\n   *\n   * - `\"read-only\"`: The license has been expired for more than 2 weeks.\n   */\n  status: \"good\" | \"expiring\" | \"expired\" | \"read-only\";\n  /**\n   * Whether the server is performing a database upgrade.\n   */\n  upgrading: boolean;\n  /**\n   * The license version number.\n   */\n  version: number;\n};\n\n/**\n * Information about the server status.\n */\nexport type ServerStatusInfo = {\n  /**\n   * (Cluster Coordinators and DB-Servers only.) The address of the server.\n   */\n  address?: string;\n  /**\n   * (Cluster Coordinators and DB-Servers only.) Information about the Agency.\n   */\n  agency?: {\n    /**\n     * Information about the communication with the Agency.\n     */\n    agencyComm: {\n      /**\n       * A list of possible Agency endpoints.\n       */\n      endpoints: string[];\n    };\n  };\n  /**\n   * (Cluster Agents only.) Information about the Agents.\n   */\n  agent?: {\n    /**\n     * The endpoint of the queried Agent.\n     */\n    endpoint: string;\n    /**\n     * Server ID of the queried Agent.\n     */\n    id: string;\n    /**\n     * Server ID of the leading Agent.\n     */\n    leaderId: string;\n    /**\n     * Whether the queried Agent is the leader.\n     */\n    leading: boolean;\n    /**\n     * The current term number.\n     */\n    term: number;\n  };\n  /**\n   * (Cluster Coordinators only.) Information about the Coordinators.\n   */\n  coordinator?: {\n    /**\n     * The server ID of the Coordinator that is the Foxx master.\n     */\n    foxxmaster: string[];\n    /**\n     * Whether the queried Coordinator is the Foxx master.\n     */\n    isFoxxmaster: boolean[];\n  };\n  /**\n   * Whether the Foxx API is enabled.\n   */\n  foxxApi: boolean;\n  /**\n   * A host identifier defined by the HOST or NODE_NAME environment variable,\n   * or a fallback value using a machine identifier or the cluster/Agency address.\n   */\n  host: string;\n  /**\n   * A hostname defined by the HOSTNAME environment variable.\n   */\n  hostname?: string;\n  /**\n   * ArangoDB Edition.\n   */\n  license: \"community\" | \"enterprise\";\n  /**\n   * Server operation mode.\n   *\n   * @deprecated Use `operationMode` instead\n   */\n  mode: \"server\" | \"console\";\n  /**\n   * Server operation mode.\n   */\n  operationMode: \"server\" | \"console\";\n  /**\n   * The process ID of arangod.\n   */\n  pid: number;\n  /**\n   * Server type.\n   */\n  server: \"arango\";\n  /**\n   * Information about the server status.\n   */\n  serverInfo: {\n    /**\n     * Whether the maintenance mode is enabled.\n     */\n    maintenance: boolean;\n    /**\n     * (Cluster only.) The persisted ID.\n     */\n    persistedId?: string;\n    /**\n     * Startup and recovery information.\n     */\n    progress: {\n      /**\n       * Internal name of the feature that is currently being prepared, started, stopped or unprepared.\n       */\n      feature: string;\n      /**\n       * Name of the lifecycle phase the instance is currently in.\n       */\n      phase: string;\n      /**\n       * Current recovery sequence number value.\n       */\n      recoveryTick: number;\n    };\n    /**\n     * Whether writes are disabled.\n     */\n    readOnly: boolean;\n    /**\n     * (Cluster only.) The reboot ID. Changes on every restart.\n     */\n    rebootId?: number;\n    /**\n     * Either \"SINGLE\", \"COORDINATOR\", \"PRIMARY\" (DB-Server), or \"AGENT\"\n     */\n    role: \"SINGLE\" | \"COORDINATOR\" | \"PRIMARY\" | \"AGENT\";\n    /**\n     * (Cluster Coordinators and DB-Servers only.) The server ID.\n     */\n    serverId?: string;\n    /**\n     * (Cluster Coordinators and DB-Servers only.) Either \"STARTUP\", \"SERVING\",\n     * or \"SHUTDOWN\".\n     */\n    state?: \"STARTUP\" | \"SERVING\" | \"SHUTDOWN\";\n    /**\n     * The server version string.\n     */\n    version: string;\n    /**\n     * Whether writes are enabled.\n     *\n     * @deprecated Use `readOnly` instead.\n     */\n    writeOpsEnabled: boolean;\n  };\n};\n\n/**\n * Server availability.\n *\n * - `\"default\"`: The server is operational.\n *\n * - `\"readonly\"`: The server is in read-only mode.\n *\n * - `false`: The server is not available.\n */\nexport type ServerAvailability = \"default\" | \"readonly\" | false;\n\n/**\n * Single server deployment information for support purposes.\n */\nexport type SingleServerSupportInfo = {\n  /**\n   * ISO 8601 datetime string of when the information was requested.\n   */\n  date: string;\n  /**\n   * Information about the deployment.\n   */\n  deployment: {\n    /**\n     * Deployment mode:\n     *\n     * - `\"single\"`: A single server deployment.\n     *\n     * - `\"cluster\"`: A cluster deployment.\n     */\n    type: \"single\";\n  };\n};\n\n/**\n * Cluster deployment information for support purposes.\n */\nexport type ClusterSupportInfo = {\n  /**\n   * ISO 8601 datetime string of when the information was requested.\n   */\n  date: string;\n  /**\n   * Information about the deployment.\n   */\n  deployment: {\n    /**\n     * Deployment mode:\n     *\n     * - `\"single\"`: A single server deployment.\n     *\n     * - `\"cluster\"`: A cluster deployment.\n     */\n    type: \"cluster\";\n    /**\n     * Information about the servers in the cluster.\n     */\n    servers: Record<string, Record<string, any>>;\n    /**\n     * Number of agents in the cluster.\n     */\n    agents: number;\n    /**\n     * Number of coordinators in the cluster.\n     */\n    coordinators: number;\n    /**\n     * Number of DB-Servers in the cluster.\n     */\n    dbServers: number;\n    /**\n     * Information about the shards in the cluster.\n     */\n    shards: {\n      /**\n       * Number of collections in the cluster.\n       */\n      collections: number;\n      /**\n       * Number of shards in the cluster.\n       */\n      shards: number;\n      /**\n       * Number of leaders in the cluster.\n       */\n      leaders: number;\n      /**\n       * Number of real leaders in the cluster.\n       */\n      realLeaders: number;\n      /**\n       * Number of followers in the cluster.\n       */\n      followers: number;\n      /**\n       * Number of servers in the cluster.\n       */\n      servers: number;\n    };\n  };\n  /**\n   * (Cluster only.) Information about the ArangoDB instance as well as the\n   * host machine.\n   */\n  host: Record<string, any>;\n};\n//#endregion\n\n//#region Queue time metrics\n/**\n * An object providing methods for accessing queue time metrics of the most\n * recently received server responses if the server supports this feature.\n */\nexport interface QueueTimeMetrics {\n  /**\n   * Returns the queue time of the most recently received response in seconds.\n   */\n  getLatest(): number | undefined;\n  /**\n   * Returns a list of the most recently received queue time values as tuples\n   * of the timestamp of the response being processed in milliseconds and the\n   * queue time in seconds.\n   */\n  getValues(): [number, number][];\n  /**\n   * Returns the average queue time of the most recently received responses\n   * in seconds.\n   */\n  getAvg(): number;\n}\n//#endregion\n"]}