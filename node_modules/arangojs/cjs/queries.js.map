{"version":3,"file":"queries.js","sourceRoot":"","sources":["../../src/queries.ts"],"names":[],"mappings":";AAAA;;;;;;;;GAQG;AACH,8CAA8C;;AA8lB9C,YAAY","sourcesContent":["/**\n * ```ts\n * import type { QueryOptions } from \"arangojs/queries\";\n * ```\n *\n * The \"query\" module provides query related types for TypeScript.\n *\n * @packageDocumentation\n */\n/** @import databases from \"./databases.js\" */\n\n//#region Query operation options\n/**\n * Options for executing a query.\n *\n * See {@link databases.Database#query}.\n */\nexport type QueryOptions = {\n  /**\n   * If set to `true`, the query will be executed with support for dirty reads\n   * enabled, permitting ArangoDB to return a potentially dirty or stale result\n   * and arangojs will load balance the request without distinguishing between\n   * leaders and followers.\n   *\n   * Note that dirty reads are only supported for read-only queries, not data\n   * modification queries (e.g. using `INSERT`, `UPDATE`, `REPLACE` or\n   * `REMOVE`) and only when using ArangoDB 3.4 or later.\n   *\n   * Default: `false`\n   */\n  allowDirtyRead?: boolean;\n  /**\n   * If set to `true`, cursor results will be stored by ArangoDB in such a way\n   * that batch reads can be retried in the case of a communication error.\n   *\n   * Default: `false`\n   */\n  allowRetry?: boolean;\n  /**\n   * Maximum time in milliseconds arangojs will wait for a server response.\n   * Exceeding this value will result in the request being cancelled.\n   *\n   * **Note**: Setting a timeout for the client does not guarantee the query\n   * will be killed by ArangoDB if it is already being executed. See the\n   * `maxRuntime` option for limiting the execution time within ArangoDB.\n   */\n  timeout?: number;\n  /**\n   * If set to a positive number, the query will automatically be retried at\n   * most this many times if it results in a write-write conflict.\n   *\n   * Default: `0`\n   */\n  retryOnConflict?: number;\n  /**\n   * Unless set to `false`, the number of result values in the result set will\n   * be returned in the `count` attribute. This may be disabled by default in\n   * a future version of ArangoDB if calculating this value has a performance\n   * impact for some queries.\n   *\n   * Default: `true`.\n   */\n  count?: boolean;\n  /**\n   * Number of result values to be transferred by the server in each\n   * network roundtrip (or \"batch\").\n   *\n   * Must be greater than zero.\n   */\n  batchSize?: number;\n  /**\n   * If set to `false`, the AQL query results cache lookup will be skipped for\n   * this query.\n   *\n   * Default: `true`\n   */\n  cache?: boolean;\n  /**\n   * Maximum memory size in bytes that the query is allowed to use.\n   * Exceeding this value will result in the query failing with an error.\n   *\n   * If set to `0`, the memory limit is disabled.\n   *\n   * Default: `0`\n   */\n  memoryLimit?: number;\n  /**\n   * Maximum allowed execution time before the query will be killed in seconds.\n   *\n   * If set to `0`, the query will be allowed to run indefinitely.\n   *\n   * Default: `0`\n   */\n  maxRuntime?: number;\n  /**\n   * Time-to-live for the cursor in seconds. The cursor results may be\n   * garbage collected by ArangoDB after this much time has passed.\n   *\n   * Default: `30`\n   */\n  ttl?: number;\n  /**\n   * If set to `true`, the query will throw an exception and abort if it would\n    otherwise produce a warning.\n   */\n  failOnWarning?: boolean;\n  /**\n   * If set to `1` or `true`, additional query profiling information will be\n   * returned in the `extra.profile` attribute if the query is not served from\n   * the result cache.\n   *\n   * If set to `2`, the query will return execution stats per query plan node\n   * in the `extra.stats.nodes` attribute. Additionally the query plan is\n   * returned in `extra.plan`.\n   */\n  profile?: boolean | number;\n  /**\n   * If set to `true`, the query will be executed as a streaming query.\n   */\n  stream?: boolean;\n  /**\n   * Limits the maximum number of warnings a query will return.\n   */\n  maxWarningsCount?: number;\n  /**\n   * If set to `true` and the query has a `LIMIT` clause, the total number of\n   * values matched before the last top-level `LIMIT` in the query was applied\n   * will be returned in the `extra.stats.fullCount` attribute.\n   */\n  fullCount?: boolean;\n  /**\n   * If set to `false`, the query data will not be stored in the RocksDB block\n   * cache. This can be used to avoid thrashing he block cache when reading a\n   * lot of data.\n   */\n  fillBlockCache?: boolean;\n  /**\n   * An object with a `rules` property specifying a list of optimizer rules to\n   * be included or excluded by the optimizer for this query. Prefix a rule\n   * name with `+` to include it, or `-` to exclude it. The name `all` acts as\n   * an alias matching all optimizer rules.\n   */\n  optimizer?: { rules: string[] };\n  /**\n   * Limits the maximum number of plans that will be created by the AQL query\n   * optimizer.\n   */\n  maxPlans?: number;\n  /**\n   * Controls after how many execution nodes in a query a stack split should be\n   * performed.\n   *\n   * Default: `250` (`200` on macOS)\n   */\n  maxNodesPerCallstack?: number;\n  /**\n   * Maximum size of transactions in bytes.\n   */\n  maxTransactionSize?: number;\n  /**\n   * Maximum number of operations after which an intermediate commit is\n   * automatically performed.\n   */\n  intermediateCommitCount?: number;\n  /**\n   * Maximum total size of operations in bytes after which an intermediate\n   * commit is automatically performed.\n   */\n  intermediateCommitSize?: number;\n  /**\n   * (Enterprise Edition cluster only.) If set to `true`, collections\n   * inaccessible to current user will result in an access error instead\n   * of being treated as empty.\n   */\n  skipInaccessibleCollections?: boolean;\n  /**\n   * (Enterprise Edition cluster only.) Limits the maximum time in seconds a\n   * DBServer will wait to bring satellite collections involved in the query\n   * into sync. Exceeding this value will result in the query being stopped.\n   *\n   * Default: `60`\n   */\n  satelliteSyncWait?: number;\n};\n\n/**\n * Options for explaining a query.\n *\n * See {@link databases.Database#explain}.\n */\nexport type ExplainOptions = {\n  /**\n   * An object with a `rules` property specifying a list of optimizer rules to\n   * be included or excluded by the optimizer for this query. Prefix a rule\n   * name with `+` to include it, or `-` to exclude it. The name `all` acts as\n   * an alias matching all optimizer rules.\n   */\n  optimizer?: { rules: string[] };\n  /**\n   * Maximum number of plans that the optimizer is allowed to generate.\n   * Setting this to a low value limits the amount of work the optimizer does.\n   */\n  maxNumberOfPlans?: number;\n  /**\n   * If set to true, all possible execution plans will be returned as the\n   * `plans` property. Otherwise only the optimal execution plan will be\n   * returned as the `plan` property.\n   *\n   * Default: `false`\n   */\n  allPlans?: boolean;\n};\n\n/**\n * Options for query tracking.\n *\n * See {@link databases.Database#queryTracking}.\n */\nexport type QueryTrackingOptions = {\n  /**\n   * If set to `false`, neither queries nor slow queries will be tracked.\n   */\n  enabled?: boolean;\n  /**\n   * Maximum query string length in bytes that will be kept in the list.\n   */\n  maxQueryStringLength?: number;\n  /**\n   * Maximum number of slow queries to be kept in the list.\n   */\n  maxSlowQueries?: number;\n  /**\n   * Threshold execution time in seconds for when a query will be\n   * considered slow.\n   */\n  slowQueryThreshold?: number;\n  /**\n   * If set to `true`, bind parameters will be tracked along with queries.\n   */\n  trackBindVars?: boolean;\n  /**\n   * If set to `true` and `enabled` is also set to `true`, slow queries will be\n   * tracked if their execution time exceeds `slowQueryThreshold`.\n   */\n  trackSlowQueries?: boolean;\n};\n\n/**\n * Options for adjusting the global properties for the AQL query results cache.\n */\nexport type QueryCachePropertiesOptions = {\n  /**\n   * If set to `true`, the query cache will include queries that involve\n   * system collections.\n   */\n  includeSystem?: boolean;\n  /**\n   * Maximum individual size of query results that will be stored per\n   * database-specific cache.\n   */\n  maxEntrySize?: number;\n  /**\n   * Maximum number of query results that will be stored per database-specific\n   * cache.\n   */\n  maxResults?: number;\n  /**\n   * Maximum cumulated size of query results that will be stored per\n   * database-specific cache.\n   */\n  maxResultsSize?: number;\n  /**\n   * Mode the AQL query cache should operate in.\n   */\n  mode?: \"off\" | \"on\" | \"demand\";\n};\n//#endregion\n\n//#region Query operation results\n/**\n * Result of explaining a query with a single plan.\n */\nexport type SingleExplainResult = {\n  /**\n   * Query plan.\n   */\n  plan: ExplainPlan;\n  /**\n   * Whether it would be possible to cache the query.\n   */\n  cacheable: boolean;\n  /**\n   * Warnings encountered while planning the query execution.\n   */\n  warnings: { code: number; message: string }[];\n  /**\n   * Optimizer statistics for the explained query.\n   */\n  stats: ExplainStats;\n};\n\n/**\n * Result of explaining a query with multiple plans.\n */\nexport type MultiExplainResult = {\n  /**\n   * Query plans.\n   */\n  plans: ExplainPlan[];\n  /**\n   * Whether it would be possible to cache the query.\n   */\n  cacheable: boolean;\n  /**\n   * Warnings encountered while planning the query execution.\n   */\n  warnings: { code: number; message: string }[];\n  /**\n   * Optimizer statistics for the explained query.\n   */\n  stats: ExplainStats;\n};\n\n/**\n * Plan explaining query execution.\n */\nexport type ExplainPlan = {\n  /**\n   * Execution nodes in this plan.\n   */\n  nodes: {\n    [key: string]: any;\n    type: string;\n    id: number;\n    dependencies: number[];\n    estimatedCost: number;\n    estimatedNrItems: number;\n  }[];\n  /**\n   * Rules applied by the optimizer.\n   */\n  rules: string[];\n  /**\n   * Information about collections involved in the query.\n   */\n  collections: {\n    name: string;\n    type: \"read\" | \"write\";\n  }[];\n  /**\n   * Variables used in the query.\n   */\n  variables: {\n    id: number;\n    name: string;\n  }[];\n  /**\n   * Total estimated cost of the plan.\n   */\n  estimatedCost: number;\n  /**\n   * Estimated number of items returned by the query.\n   */\n  estimatedNrItems: number;\n  /**\n   * Whether the query is a data modification query.\n   */\n  isModificationQuery: boolean;\n};\n\n/**\n * Optimizer statistics for an explained query.\n */\nexport type ExplainStats = {\n  /**\n   * Total number of rules executed for this query.\n   */\n  rulesExecuted: number;\n  /**\n   * Number of rules skipped for this query.\n   */\n  rulesSkipped: number;\n  /**\n   * Total number of plans created.\n   */\n  plansCreated: number;\n  /**\n   * Maximum memory usage in bytes of the query during explain.\n   */\n  peakMemoryUsage: number;\n  /**\n   * Time in seconds needed to explain the query.\n   */\n  executionTime: number;\n};\n\n/**\n * Result of parsing a query.\n */\nexport type ParseResult = {\n  /**\n   * Whether the query was parsed.\n   */\n  parsed: boolean;\n  /**\n   * Names of all collections involved in the query.\n   */\n  collections: string[];\n  /**\n   * Names of all bind parameters used in the query.\n   */\n  bindVars: string[];\n  /**\n   * Abstract syntax tree (AST) of the query.\n   */\n  ast: AstNode[];\n};\n\n/**\n * Node in an AQL abstract syntax tree (AST).\n */\nexport type AstNode = {\n  [key: string]: any;\n  type: string;\n  subNodes: AstNode[];\n};\n\n/**\n * Optimizer rule for AQL queries.\n */\nexport type QueryOptimizerRule = {\n  name: string;\n  flags: {\n    hidden: boolean;\n    clusterOnly: boolean;\n    canBeDisabled: boolean;\n    canCreateAdditionalPlans: boolean;\n    disabledByDefault: boolean;\n    enterpriseOnly: boolean;\n  };\n};\n\n/**\n * Information about query tracking.\n */\nexport type QueryTrackingInfo = {\n  /**\n   * Whether query tracking is enabled.\n   */\n  enabled: boolean;\n  /**\n   * Maximum query string length in bytes that is kept in the list.\n   */\n  maxQueryStringLength: number;\n  /**\n   * Maximum number of slow queries that is kept in the list.\n   */\n  maxSlowQueries: number;\n  /**\n   * Threshold execution time in seconds for when a query is\n   * considered slow.\n   */\n  slowQueryThreshold: number;\n  /**\n   * Whether bind parameters are being tracked along with queries.\n   */\n  trackBindVars: boolean;\n  /**\n   * Whether slow queries are being tracked.\n   */\n  trackSlowQueries: boolean;\n};\n\n/**\n * Entry in the AQL query results cache.\n */\nexport type QueryCacheEntry = {\n  /**\n   * Hash of the query results.\n   */\n  hash: string;\n  /**\n   * Query string.\n   */\n  query: string;\n  /**\n   * Bind parameters used in the query. Only shown if tracking for bind\n   * variables was enabled at server start.\n   */\n  bindVars: Record<string, any>;\n  /**\n   * Size of the query results and bind parameters in bytes.\n   */\n  size: number;\n  /**\n   * Number of documents/rows in the query results.\n   */\n  results: number;\n  /**\n   * Date and time the query was started as an ISO 8601 timestamp.\n   */\n  started: string;\n  /**\n   * Number of times the result was served from the cache.\n   */\n  hits: number;\n  /**\n   * Running time of the query in seconds.\n   */\n  runTime: number;\n  /**\n   * Collections and views involved in the query.\n   */\n  dataSources: string[];\n};\n\n/**\n * Properties of the global AQL query results cache configuration.\n */\nexport type QueryCacheProperties = {\n  /**\n   * If set to `true`, the query cache will include queries that involve\n   * system collections.\n   */\n  includeSystem: boolean;\n  /**\n   * Maximum individual size of query results that will be stored per\n   * database-specific cache.\n   */\n  maxEntrySize: number;\n  /**\n   * Maximum number of query results that will be stored per database-specific\n   * cache.\n   */\n  maxResults: number;\n  /**\n   * Maximum cumulated size of query results that will be stored per\n   * database-specific cache.\n   */\n  maxResultsSize: number;\n  /**\n   * Mode the AQL query cache should operate in.\n   */\n  mode: \"off\" | \"on\" | \"demand\";\n};\n//#endregion\n\n//#region QueryDescription\n/**\n * Object describing a query.\n */\nexport type QueryDescription = {\n  /**\n   * Unique identifier for this query.\n   */\n  id: string;\n  /**\n   * Name of the database the query runs in.\n   */\n  database: string;\n  /**\n   * Name of the user that started the query.\n   */\n  user: string;\n  /**\n   * Query string (potentially truncated).\n   */\n  query: string;\n  /**\n   * Bind parameters used in the query.\n   */\n  bindVars: Record<string, any>;\n  /**\n   * Date and time the query was started.\n   */\n  started: string;\n  /**\n   * Query's running time in seconds.\n   */\n  runTime: number;\n  /**\n   * Maximum memory usage in bytes of the query.\n   */\n  peakMemoryUsage: number;\n  /**\n   * Query's current execution state.\n   */\n  state: \"executing\" | \"finished\" | \"killed\";\n  /**\n   * Whether the query uses a streaming cursor.\n   */\n  stream: boolean;\n};\n//#endregion\n\n//#region UserFunctionDescription\n/**\n * Definition of an AQL User Function.\n */\nexport type UserFunctionDescription = {\n  /**\n   * Name of the AQL User Function.\n   */\n  name: string;\n  /**\n   * Implementation of the AQL User Function.\n   */\n  code: string;\n  /**\n   * Whether the function is deterministic.\n   *\n   * See {@link databases.Database#createUserFunction}.\n   */\n  isDeterministic: boolean;\n};\n//#endregion\n"]}