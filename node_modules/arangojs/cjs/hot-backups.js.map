{"version":3,"file":"hot-backups.js","sourceRoot":"","sources":["../../src/hot-backups.ts"],"names":[],"mappings":";AAAA;;;;;;;;GAQG","sourcesContent":["/**\n * ```ts\n * import type { HotBackupOptions } from \"arangojs/hot-backups\";\n * ```\n *\n * The \"hot-backups\" module provides types for managing hot backups.\n *\n * @packageDocumentation\n */\n\n/**\n * (Enterprise Edition only.) Options for creating a hot backup.\n */\nexport type HotBackupOptions = {\n  /**\n   * If set to `true` and no global transaction lock can be acquired within the\n   * given timeout, a possibly inconsistent backup is taken.\n   *\n   * Default: `false`\n   */\n  allowInconsistent?: boolean;\n  /**\n   * (Enterprise Edition cluster only.) If set to `true` and no global\n   * transaction lock can be acquired within the given timeout, all running\n   * transactions are forcefully aborted to ensure that a consistent backup\n   * can be created.\n   *\n   * Default: `false`.\n   */\n  force?: boolean;\n  /**\n   * Label to appended to the backup's identifier.\n   *\n   * Default: If omitted or empty, a UUID will be generated.\n   */\n  label?: string;\n  /**\n   * Time in seconds that the operation will attempt to get a consistent\n   * snapshot.\n   *\n   * Default: `120`.\n   */\n  timeout?: number;\n};\n\n/**\n * (Enterprise Edition only.) Result of a hot backup.\n */\nexport type HotBackupResult = {\n  id: string;\n  potentiallyInconsistent: boolean;\n  sizeInBytes: number;\n  datetime: string;\n  nrDBServers: number;\n  nrFiles: number;\n};\n\n/**\n * (Enterprise Edition only.) List of known hot backups.\n */\nexport type HotBackupList = {\n  server: string;\n  list: Record<\n    string,\n    HotBackupResult & {\n      version: string;\n      keys: any[];\n      available: boolean;\n      nrPiecesPresent: number;\n      countIncludesFilesOnly: boolean;\n    }\n  >;\n};\n"]}