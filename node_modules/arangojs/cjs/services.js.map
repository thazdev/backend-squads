{"version":3,"file":"services.js","sourceRoot":"","sources":["../../src/services.ts"],"names":[],"mappings":";;AA0hBA,YAAY","sourcesContent":["/**\n * ```ts\n * import type { ServiceInfo } from \"arangojs/services\";\n * ```\n *\n * The \"services\" module provides types for Foxx services.\n *\n * @packageDocumentation\n */\nimport { FoxxManifest } from \"./foxx-manifest.js\";\n/** @import databases from \"./databases.js\" */\n\n//#region Service operation options\n/**\n * Options for installing the service.\n *\n * See {@link databases.Database#installService}.\n */\nexport type InstallServiceOptions = {\n  /**\n   * An object mapping configuration option names to values.\n   *\n   * See also {@link databases.Database#getServiceConfiguration}.\n   */\n  configuration?: Record<string, any>;\n  /**\n   * An object mapping dependency aliases to mount points.\n   *\n   * See also {@link databases.Database#getServiceDependencies}.\n   */\n  dependencies?: Record<string, string>;\n  /**\n   * Whether the service should be installed in development mode.\n   *\n   * See also {@link databases.Database#setServiceDevelopmentMode}.\n   *\n   * Default: `false`\n   */\n  development?: boolean;\n  /**\n   * Whether the service should be installed in legacy compatibility mode\n   *\n   * This overrides the `engines` option in the service manifest (if any).\n   *\n   * Default: `false`\n   */\n  legacy?: boolean;\n  /**\n   * Whether the \"setup\" script should be executed.\n   *\n   * Default: `true`\n   */\n  setup?: boolean;\n};\n\n/**\n * Options for replacing a service.\n *\n * See {@link databases.Database#replaceService}.\n */\nexport type ReplaceServiceOptions = {\n  /**\n   * An object mapping configuration option names to values.\n   *\n   * See also {@link databases.Database#getServiceConfiguration}.\n   */\n  configuration?: Record<string, any>;\n  /**\n   * An object mapping dependency aliases to mount points.\n   *\n   * See also {@link databases.Database#getServiceDependencies}.\n   */\n  dependencies?: Record<string, string>;\n  /**\n   * Whether the service should be installed in development mode.\n   *\n   * See also {@link databases.Database#setServiceDevelopmentMode}.\n   *\n   * Default: `false`\n   */\n  development?: boolean;\n  /**\n   * Whether the service should be installed in legacy compatibility mode\n   *\n   * This overrides the `engines` option in the service manifest (if any).\n   *\n   * Default: `false`\n   */\n  legacy?: boolean;\n  /**\n   * Whether the \"setup\" script should be executed.\n   *\n   * Default: `true`\n   */\n  setup?: boolean;\n  /**\n   * Whether the existing service's \"teardown\" script should be executed\n   * prior to removing that service.\n   *\n   * Default: `true`\n   */\n  teardown?: boolean;\n  /**\n   * If set to `true`, replacing a service that does not already exist will\n   * fall back to installing the new service.\n   *\n   * Default: `false`\n   */\n  force?: boolean;\n};\n\n/**\n * Options for upgrading a service.\n *\n * See {@link databases.Database#upgradeService}.\n */\nexport type UpgradeServiceOptions = {\n  /**\n   * An object mapping configuration option names to values.\n   *\n   * See also {@link databases.Database#getServiceConfiguration}.\n   */\n  configuration?: Record<string, any>;\n  /**\n   * An object mapping dependency aliases to mount points.\n   *\n   * See also {@link databases.Database#getServiceDependencies}.\n   */\n  dependencies?: Record<string, string>;\n  /**\n   * Whether the service should be installed in development mode.\n   *\n   * See also {@link databases.Database#setServiceDevelopmentMode}.\n   *\n   * Default: `false`\n   */\n  development?: boolean;\n  /**\n   * Whether the service should be installed in legacy compatibility mode\n   *\n   * This overrides the `engines` option in the service manifest (if any).\n   *\n   * Default: `false`\n   */\n  legacy?: boolean;\n  /**\n   * Whether the \"setup\" script should be executed.\n   *\n   * Default: `true`\n   */\n  setup?: boolean;\n  /**\n   * Whether the existing service's \"teardown\" script should be executed\n   * prior to upgrading that service.\n   *\n   * Default: `false`\n   */\n  teardown?: boolean;\n  /**\n   * Unless set to `true`, upgrading a service that does not already exist will\n   * fall back to installing the new service.\n   *\n   * Default: `false`\n   */\n  force?: boolean;\n};\n\n/**\n * Options for uninstalling a service.\n *\n * See {@link databases.Database#uninstallService}.\n */\nexport type UninstallServiceOptions = {\n  /**\n   * Whether the service's \"teardown\" script should be executed\n   * prior to removing that service.\n   *\n   * Default: `true`\n   */\n  teardown?: boolean;\n  /**\n   * If set to `true`, uninstalling a service that does not already exist\n   * will be considered successful.\n   *\n   * Default: `false`\n   */\n  force?: boolean;\n};\n//#endregion\n\n//#region Service operation results\n/**\n * Object briefly describing a Foxx service.\n */\nexport type ServiceSummary = {\n  /**\n   * Service mount point, relative to the database.\n   */\n  mount: string;\n  /**\n   * Name defined in the service manifest.\n   */\n  name?: string;\n  /**\n   * Version defined in the service manifest.\n   */\n  version?: string;\n  /**\n   * Service dependencies the service expects to be able to match as a mapping\n   * from dependency names to versions the service is compatible with.\n   */\n  provides: Record<string, string>;\n  /**\n   * Whether development mode is enabled for this service.\n   */\n  development: boolean;\n  /**\n   * Whether the service is running in legacy compatibility mode.\n   */\n  legacy: boolean;\n};\n\n/**\n * Object describing a configuration option of a Foxx service.\n */\nexport type ServiceConfiguration = {\n  /**\n   * Data type of the configuration value.\n   *\n   * **Note**: `\"int\"` and `\"bool\"` are historical synonyms for `\"integer\"` and\n   * `\"boolean\"`. The `\"password\"` type is synonymous with `\"string\"` but can\n   * be used to distinguish values which should not be displayed in plain text\n   * by software when managing the service.\n   */\n  type:\n    | \"integer\"\n    | \"boolean\"\n    | \"string\"\n    | \"number\"\n    | \"json\"\n    | \"password\"\n    | \"int\"\n    | \"bool\";\n  /**\n   * Current value of the configuration option as stored internally.\n   */\n  currentRaw: any;\n  /**\n   * Processed current value of the configuration option as exposed in the\n   * service code.\n   */\n  current: any;\n  /**\n   * Formatted name of the configuration option.\n   */\n  title: string;\n  /**\n   * Human-readable description of the configuration option.\n   */\n  description?: string;\n  /**\n   * Whether the configuration option must be set in order for the service\n   * to be operational.\n   */\n  required: boolean;\n  /**\n   * Default value of the configuration option.\n   */\n  default?: any;\n};\n\n/**\n * Object describing a single-service dependency defined by a Foxx service.\n */\nexport type SingleServiceDependency = {\n  /**\n   * Whether this is a multi-service dependency.\n   */\n  multiple: false;\n  /**\n   * Current mount point the dependency is resolved to.\n   */\n  current?: string;\n  /**\n   * Formatted name of the dependency.\n   */\n  title: string;\n  /**\n   * Name of the service the dependency expects to match.\n   */\n  name: string;\n  /**\n   * Version of the service the dependency expects to match.\n   */\n  version: string;\n  /**\n   * Human-readable description of the dependency.\n   */\n  description?: string;\n  /**\n   * Whether the dependency must be matched in order for the service\n   * to be operational.\n   */\n  required: boolean;\n};\n\n/**\n * Object describing a multi-service dependency defined by a Foxx service.\n */\nexport type MultiServiceDependency = {\n  /**\n   * Whether this is a multi-service dependency.\n   */\n  multiple: true;\n  /**\n   * Current mount points the dependency is resolved to.\n   */\n  current?: string[];\n  /**\n   * Formatted name of the dependency.\n   */\n  title: string;\n  /**\n   * Name of the service the dependency expects to match.\n   */\n  name: string;\n  /**\n   * Version of the service the dependency expects to match.\n   */\n  version: string;\n  /**\n   * Human-readable description of the dependency.\n   */\n  description?: string;\n  /**\n   * Whether the dependency must be matched in order for the service\n   * to be operational.\n   */\n  required: boolean;\n};\n\n/**\n * Test stats for a Foxx service's tests.\n */\nexport type ServiceTestStats = {\n  /**\n   * Total number of tests found.\n   */\n  tests: number;\n  /**\n   * Number of tests that ran successfully.\n   */\n  passes: number;\n  /**\n   * Number of tests that failed.\n   */\n  failures: number;\n  /**\n   * Number of tests skipped or not executed.\n   */\n  pending: number;\n  /**\n   * Total test duration in milliseconds.\n   */\n  duration: number;\n};\n\n/**\n * Test results for a Foxx service's tests using the stream reporter.\n */\nexport type ServiceTestStreamReport = (\n  | [\"start\", { total: number }]\n  | [\"pass\", ServiceTestStreamTest]\n  | [\"fail\", ServiceTestStreamTest]\n  | [\"end\", ServiceTestStats]\n)[];\n\n/**\n * Test results for a single test case using the stream reporter.\n */\nexport type ServiceTestStreamTest = {\n  title: string;\n  fullTitle: string;\n  duration: number;\n  err?: string;\n};\n\n/**\n * Test results for a Foxx service's tests using the suite reporter.\n */\nexport type ServiceTestSuiteReport = {\n  stats: ServiceTestStats;\n  suites: ServiceTestSuite[];\n  tests: ServiceTestSuiteTest[];\n};\n\n/**\n * Test results for a single test suite using the suite reporter.\n */\nexport type ServiceTestSuite = {\n  title: string;\n  suites: ServiceTestSuite[];\n  tests: ServiceTestSuiteTest[];\n};\n\n/**\n * Test results for a single test case using the suite reporter.\n */\nexport type ServiceTestSuiteTest = {\n  result: \"pending\" | \"pass\" | \"fail\";\n  title: string;\n  duration: number;\n  err?: any;\n};\n\n/**\n * Test results for a Foxx service's tests in XUnit format using the JSONML\n * representation.\n */\nexport type ServiceTestXunitReport = [\n  \"testsuite\",\n  {\n    timestamp: number;\n    tests: number;\n    errors: number;\n    failures: number;\n    skip: number;\n    time: number;\n  },\n  ...ServiceTestXunitTest[],\n];\n\n/**\n * Test results for a single test case in XUnit format using the JSONML\n * representation.\n */\nexport type ServiceTestXunitTest =\n  | [\"testcase\", { classname: string; name: string; time: number }]\n  | [\n      \"testcase\",\n      { classname: string; name: string; time: number },\n      [\"failure\", { message: string; type: string }, string],\n    ];\n\n/**\n * Test results for a Foxx service's tests in TAP format.\n */\nexport type ServiceTestTapReport = string[];\n\n/**\n * Test results for a Foxx service's tests using the default reporter.\n */\nexport type ServiceTestDefaultReport = {\n  stats: ServiceTestStats;\n  tests: ServiceTestDefaultTest[];\n  pending: ServiceTestDefaultTest[];\n  failures: ServiceTestDefaultTest[];\n  passes: ServiceTestDefaultTest[];\n};\n\n/**\n * Test results for a single test case using the default reporter.\n */\nexport type ServiceTestDefaultTest = {\n  title: string;\n  fullTitle: string;\n  duration: number;\n  err?: string;\n};\n\n/**\n * OpenAPI 2.0 description of a Foxx service.\n */\nexport type SwaggerJson = {\n  [key: string]: any;\n  info: {\n    title: string;\n    description: string;\n    version: string;\n    license: string;\n  };\n  path: {\n    [key: string]: any;\n  };\n};\n//#endregion\n\n//#region ServiceDescription\n/**\n * Object describing a Foxx service in detail.\n */\nexport type ServiceDescription = {\n  /**\n   * Service mount point, relative to the database.\n   */\n  mount: string;\n  /**\n   * File system path of the service.\n   */\n  path: string;\n  /**\n   * Name defined in the service manifest.\n   */\n  name?: string;\n  /**\n   * Version defined in the service manifest.\n   */\n  version?: string;\n  /**\n   * Whether development mode is enabled for this service.\n   */\n  development: boolean;\n  /**\n   * Whether the service is running in legacy compatibility mode.\n   */\n  legacy: boolean;\n  /**\n   * Content of the service manifest of this service.\n   */\n  manifest: FoxxManifest;\n  /**\n   * Internal checksum of the service's initial source bundle.\n   */\n  checksum: string;\n  /**\n   * Options for this service.\n   */\n  options: {\n    /**\n     * Configuration values set for this service.\n     */\n    configuration: Record<string, any>;\n    /**\n     * Service dependency configuration of this service.\n     */\n    dependencies: Record<string, string>;\n  };\n};\n//#endregion\n"]}