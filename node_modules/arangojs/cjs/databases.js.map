{"version":3,"file":"databases.js","sourceRoot":"","sources":["../../src/databases.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * ```js\n * import { Database } from \"arangojs/databases\";\n * ```\n *\n * The \"databases\" module provides the {@link Database} class and associated\n * types and interfaces for TypeScript.\n *\n * The Database class is also re-exported by the \"index\" module.\n *\n * @packageDocumentation\n */\nimport * as administration from \"./administration.js\";\nimport * as analyzers from \"./analyzers.js\";\nimport * as aql from \"./aql.js\";\nimport * as cluster from \"./cluster.js\";\nimport * as collections from \"./collections.js\";\nimport * as configuration from \"./configuration.js\";\nimport * as connection from \"./connection.js\";\nimport * as cursors from \"./cursors.js\";\nimport * as errors from \"./errors.js\";\nimport * as graphs from \"./graphs.js\";\nimport * as hotBackups from \"./hot-backups.js\";\nimport * as jobs from \"./jobs.js\";\nimport { DATABASE_NOT_FOUND } from \"./lib/codes.js\";\nimport * as util from \"./lib/util.js\";\nimport * as logs from \"./logs.js\";\nimport * as queries from \"./queries.js\";\nimport * as routes from \"./routes.js\";\nimport * as services from \"./services.js\";\nimport * as transactions from \"./transactions.js\";\nimport * as users from \"./users.js\";\nimport * as views from \"./views.js\";\n\n//#region Database operation options\n/**\n * Options for creating a database.\n *\n * See {@link Database#createDatabase}.\n */\nexport type CreateDatabaseOptions = {\n  /**\n   * Database users to create with the database.\n   */\n  users?: users.CreateDatabaseUserOptions[];\n  /**\n   * (Cluster only.) The sharding method to use for new collections in the\n   * database.\n   */\n  sharding?: \"\" | \"flexible\" | \"single\";\n  /**\n   * (Cluster only.) Default replication factor for new collections in this\n   * database.\n   *\n   * Setting this to `1` disables replication. Setting this to `\"satellite\"`\n   * will replicate to every DBServer.\n   */\n  replicationFactor?: \"satellite\" | number;\n  /**\n   * (Cluster only.) Default write concern for new collections created in this\n   * database.\n   */\n  writeConcern?: number;\n};\n//#endregion\n\n//#region DatabaseDescription\n/**\n * Object describing a database.\n *\n * See {@link Database#get}.\n */\nexport type DatabaseDescription = {\n  /**\n   * Name of the database.\n   */\n  name: string;\n  /**\n   * Unique identifier of the database.\n   */\n  id: string;\n  /**\n   * File system path of the database.\n   */\n  path: string;\n  /**\n   * Whether the database is the system database.\n   */\n  isSystem: boolean;\n  /**\n   * (Cluster only.) The sharding method to use for new collections in the\n   * database.\n   */\n  sharding?: \"\" | \"flexible\" | \"single\";\n  /**\n   * (Cluster only.) Default replication factor for new collections in this\n   * database.\n   */\n  replicationFactor?: \"satellite\" | number;\n  /**\n   * (Cluster only.) Default write concern for new collections created in this\n   * database.\n   */\n  writeConcern?: number;\n};\n//#endregion\n\n/**\n * @internal\n */\ntype TrappedError = {\n  error: true;\n};\n\n/**\n * @internal\n */\ntype TrappedRequest<T = any> = {\n  error?: false;\n  jobId: string;\n  onResolve: (res: connection.ProcessedResponse<T>) => void;\n  onReject: (error: any) => void;\n};\n\n//#region Database class\n/**\n * Indicates whether the given value represents a {@link Database}.\n *\n * @param database - A value that might be a database.\n */\nexport function isArangoDatabase(database: any): database is Database {\n  return Boolean(database && database.isArangoDatabase);\n}\n\n/**\n * An object representing a single ArangoDB database. All arangojs collections,\n * cursors, analyzers and so on are linked to a `Database` object.\n */\nexport class Database {\n  protected _connection: connection.Connection;\n  protected _name: string;\n  protected _analyzers = new Map<string, analyzers.Analyzer>();\n  protected _collections = new Map<string, collections.Collection>();\n  protected _graphs = new Map<string, graphs.Graph>();\n  protected _views = new Map<string, views.View>();\n  protected _trapRequest?: (\n    trapped: TrappedError | TrappedRequest<any>\n  ) => void;\n\n  /**\n   * Creates a new `Database` instance with its own connection pool.\n   *\n   * See also {@link Database#database}.\n   *\n   * @param config - An object with configuration options.\n   *\n   * @example\n   * ```js\n   * const db = new Database({\n   *   url: \"http://127.0.0.1:8529\",\n   *   databaseName: \"my_database\",\n   *   auth: { username: \"admin\", password: \"hunter2\" },\n   * });\n   * ```\n   */\n  constructor(config?: configuration.ConfigOptions);\n  /**\n   * Creates a new `Database` instance with its own connection pool.\n   *\n   * See also {@link Database#database}.\n   *\n   * @param url - Base URL of the ArangoDB server or list of server URLs.\n   * Equivalent to the `url` option in {@link configuration.ConfigOptions}.\n   *\n   * @example\n   * ```js\n   * const db = new Database(\"http://127.0.0.1:8529\", \"my_database\");\n   * db.useBasicAuth(\"admin\", \"hunter2\");\n   * ```\n   */\n  constructor(url: string | string[], name?: string);\n  /**\n   * @internal\n   */\n  constructor(database: Database, name?: string);\n  constructor(\n    configOrDatabase:\n      | string\n      | string[]\n      | configuration.ConfigOptions\n      | Database = {},\n    name?: string\n  ) {\n    if (isArangoDatabase(configOrDatabase)) {\n      const connection = configOrDatabase._connection;\n      const databaseName = name || configOrDatabase.name;\n      this._connection = connection;\n      this._name = databaseName;\n      const database = connection.database(databaseName);\n      if (database) return database;\n    } else {\n      const config = configOrDatabase;\n      const { databaseName, ...options } =\n        typeof config === \"string\" || Array.isArray(config)\n          ? { databaseName: name, url: config }\n          : config;\n      this._connection = new connection.Connection(options);\n      this._name = databaseName || \"_system\";\n    }\n  }\n\n  //#region misc\n  /**\n   * @internal\n   *\n   * Indicates that this object represents an ArangoDB database.\n   */\n  get isArangoDatabase(): true {\n    return true;\n  }\n\n  /**\n   * Name of the ArangoDB database this instance represents.\n   */\n  get name() {\n    return this._name;\n  }\n\n  /**\n   * Returns a new {@link routes.Route} instance for the given path (relative to the\n   * database) that can be used to perform arbitrary HTTP requests.\n   *\n   * @param path - The database-relative URL of the route. Defaults to the\n   * database API root.\n   * @param headers - Default headers that should be sent with each request to\n   * the route.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const myFoxxService = db.route(\"my-foxx-service\");\n   * const response = await myFoxxService.post(\"users\", {\n   *   username: \"admin\",\n   *   password: \"hunter2\"\n   * });\n   * // response.body is the result of\n   * // POST /_db/_system/my-foxx-service/users\n   * // with JSON request body '{\"username\": \"admin\", \"password\": \"hunter2\"}'\n   * ```\n   */\n  route(\n    path?: string,\n    headers?: Headers | Record<string, string>\n  ): routes.Route {\n    return new routes.Route(this, path, headers);\n  }\n\n  /**\n   * @internal\n   *\n   * Performs an arbitrary HTTP request against the database.\n   *\n   * @param BodyType - Type of the expected response body.\n   * @param ReturnType - Type the response body will be transformed to.\n   * @param options - Options for this request.\n   * @param transform - An optional function to transform the low-level\n   * response object to a more useful return value.\n   */\n  async request<BodyType = any, ReturnType = BodyType>(\n    options: connection.RequestOptions,\n    transform?: (res: connection.ProcessedResponse<BodyType>) => ReturnType\n  ): Promise<ReturnType>;\n  /**\n   * @internal\n   *\n   * Performs an arbitrary HTTP request against the database.\n   *\n   * @param BodyType - Type of the expected response body.\n   * @param options - Options for this request.\n   * @param transform - If set to `false`, the raw response object will be\n   * returned.\n   */\n  async request<BodyType = any>(\n    options: connection.RequestOptions,\n    transform: false\n  ): Promise<connection.ProcessedResponse<BodyType>>;\n  async request<BodyType = any, ReturnType = BodyType>(\n    { pathname, ...opts }: connection.RequestOptions,\n    transform:\n      | false\n      | ((res: connection.ProcessedResponse<BodyType>) => ReturnType) = (res) =>\n      res.parsedBody as ReturnType\n  ): Promise<ReturnType> {\n    pathname = util.joinPath(\"_db\", encodeURIComponent(this._name), pathname);\n    if (this._trapRequest) {\n      const trap = this._trapRequest;\n      this._trapRequest = undefined;\n      return new Promise<ReturnType>(async (resolveRequest, rejectRequest) => {\n        opts.headers = new Headers(opts.headers);\n        opts.headers.set(\"x-arango-async\", \"store\");\n        let jobRes: connection.ProcessedResponse<any>;\n        try {\n          jobRes = await this._connection.request({ pathname, ...opts });\n        } catch (e) {\n          trap({ error: true });\n          rejectRequest(e);\n          return;\n        }\n        const jobId = jobRes.headers.get(\"x-arango-async-id\")!;\n        trap({\n          jobId,\n          onResolve: (res) => {\n            const result = transform ? transform(res) : (res as ReturnType);\n            resolveRequest(result);\n            return result;\n          },\n          onReject: (err) => {\n            rejectRequest(err);\n            throw err;\n          },\n        });\n      });\n    }\n    return this._connection.request(\n      { pathname, ...opts },\n      transform || undefined\n    );\n  }\n\n  /**\n   * Updates the URL list by requesting a list of all coordinators in the\n   * cluster and adding any endpoints not initially specified in the\n   * {@link configuration.ConfigOptions}.\n   *\n   * For long-running processes communicating with an ArangoDB cluster it is\n   * recommended to run this method periodically (e.g. once per hour) to make\n   * sure new coordinators are picked up correctly and can be used for\n   * fail-over or load balancing.\n   *\n   * @param overwrite - If set to `true`, the existing host list will be\n   * replaced instead of extended.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const interval = setInterval(\n   *   () => db.acquireHostList(),\n   *   5 * 60 * 1000 // every 5 minutes\n   * );\n   *\n   * // later\n   * clearInterval(interval);\n   * system.close();\n   * ```\n   */\n  async acquireHostList(overwrite = false): Promise<void> {\n    const urls: string[] = await this.request(\n      { pathname: \"/_api/cluster/endpoints\" },\n      (res) =>\n        res.parsedBody.endpoints.map((endpoint: any) => endpoint.endpoint)\n    );\n    if (urls.length > 0) {\n      if (overwrite) this._connection.setHostList(urls);\n      else this._connection.addToHostList(urls);\n    }\n  }\n\n  /**\n   * Closes all active connections of this database instance.\n   *\n   * Can be used to clean up idling connections during longer periods of\n   * inactivity.\n   *\n   * **Note**: This method currently has no effect in the browser version of\n   * arangojs.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const sessions = db.collection(\"sessions\");\n   * // Clean up expired sessions once per hour\n   * setInterval(async () => {\n   *   await db.query(aql`\n   *     FOR session IN ${sessions}\n   *     FILTER session.expires < DATE_NOW()\n   *     REMOVE session IN ${sessions}\n   *   `);\n   *   // Making sure to close the connections because they're no longer used\n   *   system.close();\n   * }, 1000 * 60 * 60);\n   * ```\n   */\n  close(): void {\n    this._connection.close();\n  }\n\n  /**\n   * Performs a request against every known coordinator and returns when the\n   * request has succeeded against every coordinator or the timeout is reached.\n   *\n   * **Note**: This method is primarily intended to make database setup easier\n   * in cluster scenarios and requires all coordinators to be known to arangojs\n   * before the method is invoked. The method is not useful in single-server or\n   * leader-follower replication scenarios.\n   *\n   * @example\n   * ```js\n   * const db = new Database({ loadBalancingStrategy: \"ROUND_ROBIN\" });\n   * await system.acquireHostList();\n   * const analyzer = db.analyzer(\"my-analyzer\");\n   * await analyzer.create();\n   * await db.waitForPropagation(\n   *   { pathname: `/_api/analyzer/${encodeURIComponent(analyzer.name)}` },\n   *   30000\n   * );\n   * // Analyzer has been propagated to all coordinators and can safely be used\n   * ```\n   *\n   * @param request - Request to perform against each known coordinator.\n   * @param timeout - Maximum number of milliseconds to wait for propagation.\n   */\n  async waitForPropagation(\n    request: connection.RequestOptions,\n    timeout?: number\n  ): Promise<void>;\n  async waitForPropagation(\n    { pathname, ...request }: connection.RequestOptions,\n    timeout?: number\n  ): Promise<void> {\n    await this._connection.waitForPropagation(\n      {\n        ...request,\n        pathname: util.joinPath(\n          \"_db\",\n          encodeURIComponent(this._name),\n          pathname\n        ),\n      },\n      timeout\n    );\n  }\n\n  /**\n   * Methods for accessing the server-reported queue times of the mostly\n   * recently received responses.\n   */\n  get queueTime(): administration.QueueTimeMetrics {\n    return this._connection.queueTime;\n  }\n\n  /**\n   * Sets the limit for the number of values of the most recently received\n   * server-reported queue times that can be accessed using\n   * {@link Database#queueTime}.\n   *\n   * @param responseQueueTimeSamples - Number of values to maintain.\n   */\n  setResponseQueueTimeSamples(responseQueueTimeSamples: number) {\n    this._connection.setResponseQueueTimeSamples(responseQueueTimeSamples);\n  }\n  //#endregion\n\n  //#region auth\n  /**\n   * Updates the underlying connection's `authorization` header to use Basic\n   * authentication with the given `username` and `password`, then returns\n   * itself.\n   *\n   * @param username - The username to authenticate with.\n   * @param password - The password to authenticate with.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * db.useBasicAuth(\"admin\", \"hunter2\");\n   * // with the username \"admin\" and password \"hunter2\".\n   * ```\n   */\n  useBasicAuth(username: string = \"root\", password: string = \"\"): this {\n    this._connection.setBasicAuth({ username, password });\n    return this;\n  }\n\n  /**\n   * Updates the underlying connection's `authorization` header to use Bearer\n   * authentication with the given authentication `token`, then returns itself.\n   *\n   * @param token - The token to authenticate with.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * db.useBearerAuth(\"keyboardcat\");\n   * // The database instance now uses Bearer authentication.\n   * ```\n   */\n  useBearerAuth(token: string): this {\n    this._connection.setBearerAuth({ token });\n    return this;\n  }\n\n  /**\n   * Validates the given database credentials and exchanges them for an\n   * authentication token, then uses the authentication token for future\n   * requests and returns it.\n   *\n   * @param username - The username to authenticate with.\n   * @param password - The password to authenticate with.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * await db.login(\"admin\", \"hunter2\");\n   * // with an authentication token for the \"admin\" user.\n   * ```\n   */\n  login(username: string = \"root\", password: string = \"\"): Promise<string> {\n    return this.request(\n      {\n        method: \"POST\",\n        pathname: \"/_open/auth\",\n        body: { username, password },\n      },\n      (res) => {\n        this.useBearerAuth(res.parsedBody.jwt);\n        return res.parsedBody.jwt;\n      }\n    );\n  }\n\n  /**\n   * Attempts to renew the authentication token passed to {@link Database#useBearerAuth}\n   * or returned and used by {@link Database#login}. If a new authentication\n   * token is issued, it will be used for future requests and returned.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * await db.login(\"admin\", \"hunter2\");\n   * // ... later ...\n   * const newToken = await db.renewAuthToken();\n   * if (!newToken) // no new token issued\n   * ```\n   */\n  renewAuthToken(): Promise<string | null> {\n    return this.request(\n      {\n        method: \"POST\",\n        pathname: \"/_open/auth/renew\",\n      },\n      (res) => {\n        if (!res.parsedBody.jwt) return null;\n        this.useBearerAuth(res.parsedBody.jwt);\n        return res.parsedBody.jwt;\n      }\n    );\n  }\n  //#endregion\n\n  //#region administration\n  /**\n   * Fetches version information from the ArangoDB server.\n   *\n   * @param details - If set to `true`, additional information about the\n   * ArangoDB server will be available as the `details` property.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const version = await db.version();\n   * // the version object contains the ArangoDB version information.\n   * // license: \"community\" or \"enterprise\"\n   * // version: ArangoDB version number\n   * // server: description of the server\n   * ```\n   */\n  version(details?: boolean): Promise<administration.VersionInfo> {\n    return this.request({\n      method: \"GET\",\n      pathname: \"/_api/version\",\n      search: { details },\n    });\n  }\n\n  /**\n   * Fetches storage engine information from the ArangoDB server.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const engine = await db.engine();\n   * // the engine object contains the storage engine information, e.g.\n   * // name: name of the storage engine\n   * ```\n   */\n  engine(): Promise<administration.EngineInfo> {\n    return this.request({\n      method: \"GET\",\n      pathname: \"/_api/engine\",\n    });\n  }\n\n  /**\n   * Fetches detailed storage engine performance and resource usage information\n   * from the ArangoDB server.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const stats = await db.engineStats();\n   * // the stats object contains the storage engine stats\n   * ```\n   */\n  engineStats(): Promise<administration.EngineStatsInfo> {\n    return this.request({\n      method: \"GET\",\n      pathname: \"/_api/engine/stats\",\n    });\n  }\n\n  /**\n   * Retrives the server's current system time in milliseconds with microsecond\n   * precision.\n   */\n  time(): Promise<number> {\n    return this.request(\n      {\n        method: \"GET\",\n        pathname: \"/_admin/time\",\n      },\n      (res) => res.parsedBody.time * 1000\n    );\n  }\n\n  /**\n   * Fetches information about the server status.\n   *\n   * @example\n   * ```js\n   * const status = await db.status();\n   * // the status object contains the ArangoDB status information, e.g.\n   * // version: ArangoDB version number\n   * // host: host identifier of the server\n   * // serverInfo: detailed information about the server\n   * ```\n   */\n  status(): Promise<administration.ServerStatusInfo> {\n    return this.request({\n      method: \"GET\",\n      pathname: \"/_admin/status\",\n    });\n  }\n\n  /**\n   * Fetches availability information about the server.\n   *\n   * @param graceful - If set to `true`, the method will always return `false`\n   * instead of throwing an error; otherwise `false` will only be returned\n   * when the server responds with a 503 status code or an ArangoDB error with\n   * a code of 503, such as during shutdown.\n   *\n   * @example\n   * ```js\n   * const availability = await db.availability();\n   * // availability is either \"default\", \"readonly\", or false\n   * ```\n   */\n  async availability(\n    graceful = false\n  ): Promise<administration.ServerAvailability> {\n    try {\n      return this.request(\n        {\n          method: \"GET\",\n          pathname: \"/_admin/server/availability\",\n        },\n        (res) => res.parsedBody.mode\n      );\n    } catch (e) {\n      if (graceful) return false;\n      if (\n        (errors.isArangoError(e) || e instanceof errors.HttpError) &&\n        e.code === 503\n      ) {\n        return false;\n      }\n      throw e;\n    }\n  }\n\n  /**\n   * Fetches deployment information about the server for support purposes.\n   *\n   * Note that this API may reveal sensitive data about the deployment.\n   */\n  supportInfo(): Promise<\n    administration.SingleServerSupportInfo | administration.ClusterSupportInfo\n  > {\n    return this.request({\n      method: \"GET\",\n      pathname: \"/_admin/support-info\",\n    });\n  }\n\n  /**\n   * Fetches the license information and status of an Enterprise Edition server.\n   */\n  getLicense(): Promise<administration.LicenseInfo> {\n    return this.request({\n      method: \"GET\",\n      pathname: \"/_admin/license\",\n    });\n  }\n\n  /**\n   * Set a new license for an Enterprise Edition server.\n   *\n   * @param license - The license as a base 64 encoded string.\n   * @param force - If set to `true`, the license will be changed even if it\n   * expires sooner than the current license.\n   */\n  setLicense(license: string, force = false): Promise<void> {\n    return this.request(\n      {\n        method: \"PUT\",\n        pathname: \"/_admin/license\",\n        body: license,\n        search: { force },\n      },\n      () => undefined\n    );\n  }\n\n  /**\n   * Compacts all databases on the server.\n   *\n   * @param options - Options for compacting the databases.\n   */\n  compact(options: administration.CompactOptions = {}): Promise<void> {\n    return this.request(\n      {\n        method: \"PUT\",\n        pathname: \"/_admin/compact\",\n        body: options,\n      },\n      () => undefined\n    );\n  }\n\n  /**\n   * Attempts to initiate a clean shutdown of the server.\n   */\n  shutdown(): Promise<void> {\n    return this.request(\n      {\n        method: \"DELETE\",\n        pathname: \"/_admin/shutdown\",\n      },\n      () => undefined\n    );\n  }\n  //#endregion\n\n  //#region rebalancing\n  /**\n   * Computes the current cluster imbalance.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const imbalance = await db.getClusterImbalance();\n   * ```\n   */\n  getClusterImbalance(): Promise<cluster.ClusterRebalanceState> {\n    return this.request(\n      { pathname: \"/_admin/cluster/rebalance\" },\n      (res) => res.parsedBody.result\n    );\n  }\n\n  /**\n   * Computes a set of move shard operations to rebalance the cluster.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const result = await db.computerClusterRebalance({\n   *   moveLeaders: true,\n   *   moveFollowers: true\n   * });\n   * if (result.moves.length) {\n   *   await db.executeClusterRebalance(result.moves);\n   * }\n   * ```\n   */\n  computeClusterRebalance(\n    options: cluster.ClusterRebalanceOptions\n  ): Promise<cluster.ClusterRebalanceResult> {\n    return this.request(\n      {\n        method: \"POST\",\n        pathname: \"/_admin/cluster/rebalance\",\n        body: {\n          version: 1,\n          ...options,\n        },\n      },\n      (res) => res.parsedBody.result\n    );\n  }\n\n  /**\n   * Executes the given cluster move shard operations.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const result = await db.computerClusterRebalance({\n   *   moveLeaders: true,\n   *   moveFollowers: true\n   * });\n   * if (result.moves.length) {\n   *   await db.executeClusterRebalance(result.moves);\n   * }\n   * ```\n   */\n  executeClusterRebalance(\n    moves: cluster.ClusterRebalanceMove[]\n  ): Promise<unknown> {\n    return this.request({\n      method: \"POST\",\n      pathname: \"/_admin/cluster/rebalance/execute\",\n      body: {\n        version: 1,\n        moves,\n      },\n    });\n  }\n\n  /**\n   * Computes a set of move shard operations to rebalance the cluster and\n   * executes them.\n   *\n   * @param options - Options for rebalancing the cluster.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const result = await db.rebalanceCluster({\n   *   moveLeaders: true,\n   *   moveFollowers: true\n   * });\n   * // The cluster is now rebalanced.\n   * ```\n   */\n  rebalanceCluster(\n    options: cluster.ClusterRebalanceOptions\n  ): Promise<cluster.ClusterRebalanceResult> {\n    return this.request({\n      method: \"PUT\",\n      pathname: \"/_admin/cluster/rebalance\",\n      body: {\n        version: 1,\n        ...options,\n      },\n    });\n  }\n  //#endregion\n\n  //#region databases\n  /**\n   * Creates a new `Database` instance for the given `databaseName` that\n   * shares this database's connection pool.\n   *\n   * See also {@link Database:constructor}.\n   *\n   * @param databaseName - Name of the database.\n   *\n   * @example\n   * ```js\n   * const systemDb = new Database();\n   * const myDb = systemDb.database(\"my_database\");\n   * ```\n   */\n  database(databaseName: string) {\n    return new Database(this, databaseName);\n  }\n\n  /**\n   * Fetches the database description for the active database from the server.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const info = await db.get();\n   * // the database exists\n   * ```\n   */\n  get(): Promise<DatabaseDescription> {\n    return this.request(\n      { pathname: \"/_api/database/current\" },\n      (res) => res.parsedBody.result\n    );\n  }\n\n  /**\n   * Checks whether the database exists.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const result = await db.exists();\n   * // result indicates whether the database exists\n   * ```\n   */\n  async exists(): Promise<boolean> {\n    try {\n      await this.get();\n      return true;\n    } catch (err: any) {\n      if (errors.isArangoError(err) && err.errorNum === DATABASE_NOT_FOUND) {\n        return false;\n      }\n      throw err;\n    }\n  }\n\n  /**\n   * Creates a new database with the given `databaseName` with the given\n   * `options` and returns a `Database` instance for that database.\n   *\n   * @param databaseName - Name of the database to create.\n   * @param options - Options for creating the database.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const info = await db.createDatabase(\"mydb\", {\n   *   users: [{ username: \"root\" }]\n   * });\n   * // the database has been created\n   * ```\n   */\n  createDatabase(\n    databaseName: string,\n    options?: CreateDatabaseOptions\n  ): Promise<Database>;\n  /**\n   * Creates a new database with the given `databaseName` with the given\n   * `users` and returns a `Database` instance for that database.\n   *\n   * @param databaseName - Name of the database to create.\n   * @param users - Database users to create with the database.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const info = await db.createDatabase(\"mydb\", [{ username: \"root\" }]);\n   * // the database has been created\n   * ```\n   */\n  createDatabase(\n    databaseName: string,\n    users: users.CreateDatabaseUserOptions[]\n  ): Promise<Database>;\n  createDatabase(\n    databaseName: string,\n    usersOrOptions:\n      | users.CreateDatabaseUserOptions[]\n      | CreateDatabaseOptions = {}\n  ): Promise<Database> {\n    const { users, ...options } = Array.isArray(usersOrOptions)\n      ? { users: usersOrOptions }\n      : usersOrOptions;\n    return this.request(\n      {\n        method: \"POST\",\n        pathname: \"/_api/database\",\n        body: { name: databaseName, users, options },\n      },\n      () => this.database(databaseName)\n    );\n  }\n\n  /**\n   * Fetches all databases from the server and returns an array of their names.\n   *\n   * See also {@link Database#databases} and\n   * {@link Database#listUserDatabases}.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const names = await db.listDatabases();\n   * // databases is an array of database names\n   * ```\n   */\n  listDatabases(): Promise<string[]> {\n    return this.request(\n      { pathname: \"/_api/database\" },\n      (res) => res.parsedBody.result\n    );\n  }\n\n  /**\n   * Fetches all databases accessible to the active user from the server and\n   * returns an array of their names.\n   *\n   * See also {@link Database#userDatabases} and\n   * {@link Database#listDatabases}.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const names = await db.listUserDatabases();\n   * // databases is an array of database names\n   * ```\n   */\n  listUserDatabases(): Promise<string[]> {\n    return this.request(\n      { pathname: \"/_api/database/user\" },\n      (res) => res.parsedBody.result\n    );\n  }\n\n  /**\n   * Fetches all databases from the server and returns an array of `Database`\n   * instances for those databases.\n   *\n   * See also {@link Database#listDatabases} and\n   * {@link Database#userDatabases}.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const names = await db.databases();\n   * // databases is an array of databases\n   * ```\n   */\n  databases(): Promise<Database[]> {\n    return this.request({ pathname: \"/_api/database\" }, (res) =>\n      (res.parsedBody.result as string[]).map((databaseName) =>\n        this.database(databaseName)\n      )\n    );\n  }\n\n  /**\n   * Fetches all databases accessible to the active user from the server and\n   * returns an array of `Database` instances for those databases.\n   *\n   * See also {@link Database#listUserDatabases} and\n   * {@link Database#databases}.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const names = await db.userDatabases();\n   * // databases is an array of databases\n   * ```\n   */\n  userDatabases(): Promise<Database[]> {\n    return this.request({ pathname: \"/_api/database/user\" }, (res) =>\n      (res.parsedBody.result as string[]).map((databaseName) =>\n        this.database(databaseName)\n      )\n    );\n  }\n\n  /**\n   * Deletes the database with the given `databaseName` from the server.\n   *\n   * @param databaseName - Name of the database to delete.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * await db.dropDatabase(\"mydb\");\n   * // database \"mydb\" no longer exists\n   * ```\n   */\n  dropDatabase(databaseName: string): Promise<boolean> {\n    return this.request(\n      {\n        method: \"DELETE\",\n        pathname: `/_api/database/${encodeURIComponent(databaseName)}`,\n      },\n      (res) => res.parsedBody.result\n    );\n  }\n  //#endregion\n\n  //#region collections\n  /**\n   * Returns a `Collection` instance for the given collection name.\n   *\n   * In TypeScript the collection implements both the\n   * {@link collections.DocumentCollection} and {@link collections.EdgeCollection}\n   * interfaces and can be cast to either type to enforce a stricter API.\n   *\n   * @param EntryResultType - Type to represent document contents returned by\n   * the server (including computed properties).\n   * @param EntryInputType - Type to represent document contents passed when\n   * inserting or replacing documents (without computed properties).\n   * @param collectionName - Name of the edge collection.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"potatoes\");\n   * ```\n   *\n   * @example\n   * ```ts\n   * interface Person {\n   *   name: string;\n   * }\n   * const db = new Database();\n   * const persons = db.collection<Person>(\"persons\");\n   * ```\n   *\n   * @example\n   * ```ts\n   * interface Person {\n   *   name: string;\n   * }\n   * interface Friend {\n   *   startDate: number;\n   *   endDate?: number;\n   * }\n   * const db = new Database();\n   * const documents = db.collection(\"persons\") as DocumentCollection<Person>;\n   * const edges = db.collection(\"friends\") as EdgeCollection<Friend>;\n   * ```\n   */\n  collection<\n    EntryResultType extends Record<string, any> = any,\n    EntryInputType extends Record<string, any> = EntryResultType,\n  >(\n    collectionName: string\n  ): collections.DocumentCollection<EntryResultType, EntryInputType> &\n    collections.EdgeCollection<EntryResultType, EntryInputType> {\n    collectionName = collectionName;\n    if (!this._collections.has(collectionName)) {\n      this._collections.set(\n        collectionName,\n        new collections.Collection(this, collectionName)\n      );\n    }\n    return this._collections.get(collectionName)!;\n  }\n\n  /**\n   * Creates a new collection with the given `collectionName` and `options`,\n   * then returns a {@link collections.DocumentCollection} instance for the new collection.\n   *\n   * @param EntryResultType - Type to represent document contents returned by\n   * the server (including computed properties).\n   * @param EntryInputType - Type to represent document contents passed when\n   * inserting or replacing documents (without computed properties).\n   * @param collectionName - Name of the new collection.\n   * @param options - Options for creating the collection.\n   *\n   * @example\n   * ```ts\n   * const db = new Database();\n   * const documents = db.createCollection(\"persons\");\n   * ```\n   *\n   * @example\n   * ```ts\n   * interface Person {\n   *   name: string;\n   * }\n   * const db = new Database();\n   * const documents = db.createCollection<Person>(\"persons\");\n   * ```\n   */\n  async createCollection<\n    EntryResultType extends Record<string, any> = any,\n    EntryInputType extends Record<string, any> = EntryResultType,\n  >(\n    collectionName: string,\n    options?: collections.CreateCollectionOptions & {\n      type?: collections.CollectionType.DOCUMENT_COLLECTION;\n    }\n  ): Promise<collections.DocumentCollection<EntryResultType, EntryInputType>>;\n  /**\n   * Creates a new edge collection with the given `collectionName` and\n   * `options`, then returns an {@link collections.EdgeCollection} instance for the new\n   * edge collection.\n   *\n   * @param EntryResultType - Type to represent edge document contents returned\n   * by the server (including computed properties).\n   * @param EntryInputType - Type to represent edge document contents passed\n   * when inserting or replacing documents (without computed properties).\n   * @param collectionName - Name of the new collection.\n   * @param options - Options for creating the collection.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const edges = db.createCollection(\"friends\", {\n   *   type: CollectionType.EDGE_COLLECTION\n   * });\n   * ```\n   *\n   * @example\n   * ```ts\n   * interface Friend {\n   *   startDate: number;\n   *   endDate?: number;\n   * }\n   * const db = new Database();\n   * const edges = db.createCollection<Friend>(\"friends\", {\n   *   type: CollectionType.EDGE_COLLECTION\n   * });\n   * ```\n   */\n  async createCollection<\n    EntryResultType extends Record<string, any> = any,\n    EntryInputType extends Record<string, any> = EntryResultType,\n  >(\n    collectionName: string,\n    options: collections.CreateCollectionOptions & {\n      type: collections.CollectionType.EDGE_COLLECTION;\n    }\n  ): Promise<collections.EdgeCollection<EntryResultType, EntryInputType>>;\n  async createCollection<\n    EntryResultType extends Record<string, any> = any,\n    EntryInputType extends Record<string, any> = EntryResultType,\n  >(\n    collectionName: string,\n    options?: collections.CreateCollectionOptions & {\n      type?: collections.CollectionType;\n    }\n  ): Promise<\n    collections.DocumentCollection<EntryResultType, EntryInputType> &\n      collections.EdgeCollection<EntryResultType, EntryInputType>\n  > {\n    const collection = this.collection(collectionName);\n    await collection.create(options);\n    return collection;\n  }\n\n  /**\n   * Creates a new edge collection with the given `collectionName` and\n   * `options`, then returns an {@link collections.EdgeCollection} instance for the new\n   * edge collection.\n   *\n   * This is a convenience method for calling {@link Database#createCollection}\n   * with `options.type` set to `EDGE_COLLECTION`.\n   *\n   * @param EntryResultType - Type to represent edge document contents returned\n   * by the server (including computed properties).\n   * @param EntryInputType - Type to represent edge document contents passed\n   * when inserting or replacing documents (without computed properties).\n   * @param collectionName - Name of the new collection.\n   * @param options - Options for creating the collection.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const edges = db.createEdgeCollection(\"friends\");\n   * ```\n   *\n   * @example\n   * ```ts\n   * interface Friend {\n   *   startDate: number;\n   *   endDate?: number;\n   * }\n   * const db = new Database();\n   * const edges = db.createEdgeCollection<Friend>(\"friends\");\n   * ```\n   */\n  async createEdgeCollection<\n    EntryResultType extends Record<string, any> = any,\n    EntryInputType extends Record<string, any> = EntryResultType,\n  >(\n    collectionName: string,\n    options?: collections.CreateCollectionOptions\n  ): Promise<collections.EdgeCollection<EntryResultType, EntryInputType>> {\n    return this.createCollection(collectionName, {\n      ...options,\n      type: collections.CollectionType.EDGE_COLLECTION,\n    });\n  }\n\n  /**\n   * Renames the collection `collectionName` to `newName`.\n   *\n   * Additionally removes any stored `Collection` instance for\n   * `collectionName` from the `Database` instance's internal cache.\n   *\n   * **Note**: Renaming collections may not be supported when ArangoDB is\n   * running in a cluster configuration.\n   *\n   * @param collectionName - Current name of the collection.\n   * @param newName - The new name of the collection.\n   */\n  async renameCollection(\n    collectionName: string,\n    newName: string\n  ): Promise<connection.ArangoApiResponse<collections.CollectionDescription>> {\n    const result = await this.request({\n      method: \"PUT\",\n      pathname: `/_api/collection/${encodeURIComponent(collectionName)}/rename`,\n      body: { name: newName },\n    });\n    this._collections.delete(collectionName);\n    return result;\n  }\n\n  /**\n   * Fetches all collections from the database and returns an array of\n   * collection descriptions.\n   *\n   * See also {@link Database#collections}.\n   *\n   * @param excludeSystem - Whether system collections should be excluded.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collections = await db.listCollections();\n   * // collections is an array of collection descriptions\n   * // not including system collections\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collections = await db.listCollections(false);\n   * // collections is an array of collection descriptions\n   * // including system collections\n   * ```\n   */\n  listCollections(\n    excludeSystem: boolean = true\n  ): Promise<collections.CollectionDescription[]> {\n    return this.request(\n      {\n        pathname: \"/_api/collection\",\n        search: { excludeSystem },\n      },\n      (res) => res.parsedBody.result\n    );\n  }\n\n  /**\n   * Fetches all collections from the database and returns an array of\n   * `Collection` instances.\n   *\n   * In TypeScript these instances implement both the\n   * {@link collections.DocumentCollection} and {@link collections.EdgeCollection}\n   * interfaces and can be cast to either type to enforce a stricter API.\n   *\n   * See also {@link Database#listCollections}.\n   *\n   * @param excludeSystem - Whether system collections should be excluded.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collections = await db.collections();\n   * // collections is an array of DocumentCollection and EdgeCollection\n   * // instances not including system collections\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collections = await db.collections(false);\n   * // collections is an array of DocumentCollection and EdgeCollection\n   * // instances including system collections\n   * ```\n   */\n  async collections(\n    excludeSystem: boolean = true\n  ): Promise<\n    Array<collections.DocumentCollection & collections.EdgeCollection>\n  > {\n    const collections = await this.listCollections(excludeSystem);\n    return collections.map((data) => this.collection(data.name));\n  }\n  //#endregion\n\n  //#region graphs\n  /**\n   * Returns a {@link graphs.Graph} instance representing the graph with the given\n   * `graphName`.\n   *\n   * @param graphName - Name of the graph.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const graph = db.graph(\"some-graph\");\n   * ```\n   */\n  graph(graphName: string): graphs.Graph {\n    if (!this._graphs.has(graphName)) {\n      this._graphs.set(graphName, new graphs.Graph(this, graphName));\n    }\n    return this._graphs.get(graphName)!;\n  }\n\n  /**\n   * Creates a graph with the given `graphName` and `edgeDefinitions`, then\n   * returns a {@link graphs.Graph} instance for the new graph.\n   *\n   * @param graphName - Name of the graph to be created.\n   * @param edgeDefinitions - An array of edge definitions.\n   * @param options - An object defining the properties of the graph.\n   */\n  async createGraph(\n    graphName: string,\n    edgeDefinitions: graphs.EdgeDefinitionOptions[],\n    options?: graphs.CreateGraphOptions\n  ): Promise<graphs.Graph> {\n    const graph = this.graph(graphName);\n    await graph.create(edgeDefinitions, options);\n    return graph;\n  }\n\n  /**\n   * Fetches all graphs from the database and returns an array of graph\n   * descriptions.\n   *\n   * See also {@link Database#graphs}.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const graphs = await db.listGraphs();\n   * // graphs is an array of graph descriptions\n   * ```\n   */\n  listGraphs(): Promise<graphs.GraphDescription[]> {\n    return this.request(\n      { pathname: \"/_api/gharial\" },\n      (res) => res.parsedBody.graphs\n    );\n  }\n\n  /**\n   * Fetches all graphs from the database and returns an array of {@link graphs.Graph}\n   * instances for those graphs.\n   *\n   * See also {@link Database#listGraphs}.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const graphs = await db.graphs();\n   * // graphs is an array of Graph instances\n   * ```\n   */\n  async graphs(): Promise<graphs.Graph[]> {\n    const graphs = await this.listGraphs();\n    return graphs.map((data: any) => this.graph(data._key));\n  }\n  //#endregion\n\n  //#region views\n  /**\n   * Returns a {@link views.View} instance for the given `viewName`.\n   *\n   * @param viewName - Name of the ArangoSearch or SearchAlias View.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const view = db.view(\"potatoes\");\n   * ```\n   */\n  view(viewName: string): views.View {\n    if (!this._views.has(viewName)) {\n      this._views.set(viewName, new views.View(this, viewName));\n    }\n    return this._views.get(viewName)!;\n  }\n\n  /**\n   * Creates a new View with the given `viewName` and `options`, then returns a\n   * {@link views.View} instance for the new View.\n   *\n   * @param viewName - Name of the View.\n   * @param options - An object defining the properties of the View.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const view = await db.createView(\"potatoes\", { type: \"arangosearch\" });\n   * // the ArangoSearch View \"potatoes\" now exists\n   * ```\n   */\n  async createView(\n    viewName: string,\n    options: views.CreateViewOptions\n  ): Promise<views.View> {\n    const view = this.view(viewName);\n    await view.create(options);\n    return view;\n  }\n\n  /**\n   * Renames the view `viewName` to `newName`.\n   *\n   * Additionally removes any stored {@link views.View} instance for `viewName` from\n   * the `Database` instance's internal cache.\n   *\n   * **Note**: Renaming views may not be supported when ArangoDB is running in\n   * a cluster configuration.\n   *\n   * @param viewName - Current name of the view.\n   * @param newName - The new name of the view.\n   */\n  async renameView(\n    viewName: string,\n    newName: string\n  ): Promise<connection.ArangoApiResponse<views.ViewDescription>> {\n    const result = await this.request({\n      method: \"PUT\",\n      pathname: `/_api/view/${encodeURIComponent(viewName)}/rename`,\n      body: { name: newName },\n    });\n    this._views.delete(viewName);\n    return result;\n  }\n\n  /**\n   * Fetches all Views from the database and returns an array of View\n   * descriptions.\n   *\n   * See also {@link Database#views}.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   *\n   * const views = await db.listViews();\n   * // views is an array of View descriptions\n   * ```\n   */\n  listViews(): Promise<views.ViewDescription[]> {\n    return this.request(\n      { pathname: \"/_api/view\" },\n      (res) => res.parsedBody.result\n    );\n  }\n\n  /**\n   * Fetches all Views from the database and returns an array of\n   * {@link views.View} instances\n   * for the Views.\n   *\n   * See also {@link Database#listViews}.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const views = await db.views();\n   * // views is an array of ArangoSearch View instances\n   * ```\n   */\n  async views(): Promise<views.View[]> {\n    const views = await this.listViews();\n    return views.map((data) => this.view(data.name));\n  }\n  //#endregion\n\n  //#region analyzers\n  /**\n   * Returns an {@link analyzers.Analyzer} instance representing the Analyzer with the\n   * given `analyzerName`.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const analyzer = db.analyzer(\"some-analyzer\");\n   * const info = await analyzer.get();\n   * ```\n   */\n  analyzer(analyzerName: string): analyzers.Analyzer {\n    if (!this._analyzers.has(analyzerName)) {\n      this._analyzers.set(\n        analyzerName,\n        new analyzers.Analyzer(this, analyzerName)\n      );\n    }\n    return this._analyzers.get(analyzerName)!;\n  }\n\n  /**\n   * Creates a new Analyzer with the given `analyzerName` and `options`, then\n   * returns an {@link analyzers.Analyzer} instance for the new Analyzer.\n   *\n   * @param analyzerName - Name of the Analyzer.\n   * @param options - An object defining the properties of the Analyzer.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const analyzer = await db.createAnalyzer(\"potatoes\", { type: \"identity\" });\n   * // the identity Analyzer \"potatoes\" now exists\n   * ```\n   */\n  async createAnalyzer(\n    analyzerName: string,\n    options: analyzers.CreateAnalyzerOptions\n  ): Promise<analyzers.Analyzer> {\n    const analyzer = this.analyzer(analyzerName);\n    await analyzer.create(options);\n    return analyzer;\n  }\n\n  /**\n   * Fetches all Analyzers visible in the database and returns an array of\n   * Analyzer descriptions.\n   *\n   * See also {@link Database#analyzers}.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const analyzers = await db.listAnalyzers();\n   * // analyzers is an array of Analyzer descriptions\n   * ```\n   */\n  listAnalyzers(): Promise<analyzers.AnalyzerDescription[]> {\n    return this.request(\n      { pathname: \"/_api/analyzer\" },\n      (res) => res.parsedBody.result\n    );\n  }\n\n  /**\n   * Fetches all Analyzers visible in the database and returns an array of\n   * {@link analyzers.Analyzer} instances for those Analyzers.\n   *\n   * See also {@link Database#listAnalyzers}.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const analyzers = await db.analyzers();\n   * // analyzers is an array of Analyzer instances\n   * ```\n   */\n  async analyzers(): Promise<analyzers.Analyzer[]> {\n    const analyzers = await this.listAnalyzers();\n    return analyzers.map((data) => this.analyzer(data.name));\n  }\n  //#endregion\n\n  //#region users\n  /**\n   * Fetches all ArangoDB users visible to the authenticated user and returns\n   * an array of user objects.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const users = await db.listUsers();\n   * // users is an array of user objects\n   * ```\n   */\n  listUsers(): Promise<users.ArangoUser[]> {\n    return this.request(\n      {\n        pathname: \"/_api/user\",\n      },\n      (res) => res.parsedBody.result\n    );\n  }\n\n  /**\n   * Fetches the user data of a single ArangoDB user.\n   *\n   * @param username - Name of the ArangoDB user to fetch.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const user = await db.getUser(\"steve\");\n   * // user is the user object for the user named \"steve\"\n   * ```\n   */\n  getUser(\n    username: string\n  ): Promise<connection.ArangoApiResponse<users.ArangoUser>> {\n    return this.request({\n      pathname: `/_api/user/${encodeURIComponent(username)}`,\n    });\n  }\n\n  /**\n   * Creates a new ArangoDB user with the given password.\n   *\n   * @param username - Name of the ArangoDB user to create.\n   * @param passwd - Password of the new ArangoDB user.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const user = await db.createUser(\"steve\", \"hunter2\");\n   * // The user \"steve\" has been created\n   * ```\n   */\n  createUser(\n    username: string,\n    passwd: string\n  ): Promise<connection.ArangoApiResponse<users.ArangoUser>>;\n  /**\n   * Creates a new ArangoDB user with the given options.\n   *\n   * @param username - Name of the ArangoDB user to create.\n   * @param options - Additional options for creating the ArangoDB user.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const user = await db.createUser(\"steve\", { passwd: \"hunter2\" });\n   * // The user \"steve\" has been created\n   * ```\n   */\n  createUser(\n    username: string,\n    options: users.UserOptions\n  ): Promise<connection.ArangoApiResponse<users.ArangoUser>>;\n  createUser(\n    username: string,\n    options: string | users.UserOptions\n  ): Promise<connection.ArangoApiResponse<users.ArangoUser>> {\n    if (typeof options === \"string\") {\n      options = { passwd: options };\n    }\n    return this.request(\n      {\n        method: \"POST\",\n        pathname: \"/_api/user\",\n        body: { user: username, ...options },\n      },\n      (res) => res.parsedBody\n    );\n  }\n\n  /**\n   * Sets the password of a given ArangoDB user to the new value.\n   *\n   * @param username - Name of the ArangoDB user to change the password for.\n   * @param passwd - New password for the ArangoDB user.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const user = await db.updateUser(\"steve\", \"hunter2\");\n   * // The user \"steve\" has received a new password\n   * ```\n   */\n  updateUser(\n    username: string,\n    passwd: string\n  ): Promise<connection.ArangoApiResponse<users.ArangoUser>>;\n  /**\n   * Updates the ArangoDB user with the new options.\n   *\n   * @param username - Name of the ArangoDB user to modify.\n   * @param options - Options of the ArangoDB user to modify.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const user = await db.updateUser(\"steve\", { active: false });\n   * // The user \"steve\" has been set to inactive\n   * ```\n   */\n  updateUser(\n    username: string,\n    options: Partial<users.UserOptions>\n  ): Promise<connection.ArangoApiResponse<users.ArangoUser>>;\n  updateUser(\n    username: string,\n    options: string | Partial<users.UserOptions>\n  ): Promise<connection.ArangoApiResponse<users.ArangoUser>> {\n    if (typeof options === \"string\") {\n      options = { passwd: options };\n    }\n    return this.request(\n      {\n        method: \"PATCH\",\n        pathname: `/_api/user/${encodeURIComponent(username)}`,\n        body: options,\n      },\n      (res) => res.parsedBody\n    );\n  }\n\n  /**\n   * Replaces the ArangoDB user's option with the new options.\n   *\n   * @param username - Name of the ArangoDB user to modify.\n   * @param options - New options to replace the user's existing options.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const user = await db.replaceUser(\"steve\", { passwd: \"\", active: false });\n   * // The user \"steve\" has been set to inactive with an empty password\n   * ```\n   */\n  replaceUser(\n    username: string,\n    options: users.UserOptions\n  ): Promise<connection.ArangoApiResponse<users.ArangoUser>> {\n    if (typeof options === \"string\") {\n      options = { passwd: options };\n    }\n    return this.request(\n      {\n        method: \"PUT\",\n        pathname: `/_api/user/${encodeURIComponent(username)}`,\n        body: options,\n      },\n      (res) => res.parsedBody\n    );\n  }\n\n  /**\n   * Removes the ArangoDB user with the given username from the server.\n   *\n   * @param username - Name of the ArangoDB user to remove.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * await db.removeUser(\"steve\");\n   * // The user \"steve\" has been removed\n   * ```\n   */\n  removeUser(username: string): Promise<void> {\n    return this.request(\n      {\n        method: \"DELETE\",\n        pathname: `/_api/user/${encodeURIComponent(username)}`,\n      },\n      () => undefined\n    );\n  }\n\n  /**\n   * Fetches the given ArangoDB user's access level for the database, or the\n   * given collection in the given database.\n   *\n   * @param username - Name of the ArangoDB user to fetch the access level for.\n   * @param options - Collection and/or database to fetch the access level for.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const accessLevel = await db.getUserAccessLevel(\"steve\");\n   * // The access level of the user \"steve\" has been fetched for the current\n   * // database.\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const accessLevel = await db.getUserAccessLevel(\"steve\", {\n   *   database: \"staging\"\n   * });\n   * // The access level of the user \"steve\" has been fetched for the \"staging\"\n   * // database.\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const accessLevel = await db.getUserAccessLevel(\"steve\", {\n   *   collection: \"pokemons\"\n   * });\n   * // The access level of the user \"steve\" has been fetched for the\n   * // \"pokemons\" collection in the current database.\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const accessLevel = await db.getUserAccessLevel(\"steve\", {\n   *   database: \"staging\",\n   *   collection: \"pokemons\"\n   * });\n   * // The access level of the user \"steve\" has been fetched for the\n   * // \"pokemons\" collection in the \"staging\" database.\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const staging = db.database(\"staging\");\n   * const accessLevel = await db.getUserAccessLevel(\"steve\", {\n   *   database: staging\n   * });\n   * // The access level of the user \"steve\" has been fetched for the \"staging\"\n   * // database.\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const staging = db.database(\"staging\");\n   * const accessLevel = await db.getUserAccessLevel(\"steve\", {\n   *   collection: staging.collection(\"pokemons\")\n   * });\n   * // The access level of the user \"steve\" has been fetched for the\n   * // \"pokemons\" collection in database \"staging\".\n   * ```\n   */\n  getUserAccessLevel(\n    username: string,\n    options: users.UserAccessLevelOptions\n  ): Promise<users.AccessLevel> {\n    const { database, collection } = options;\n    const databaseName = isArangoDatabase(database)\n      ? database.name\n      : (database ??\n        (collection instanceof collections.Collection\n          ? collection.database.name\n          : this._name));\n    const suffix = collection\n      ? `/${encodeURIComponent(\n          collections.isArangoCollection(collection)\n            ? collection.name\n            : collection\n        )}`\n      : \"\";\n    return this.request(\n      {\n        pathname: `/_api/user/${encodeURIComponent(\n          username\n        )}/database/${encodeURIComponent(databaseName)}${suffix}`,\n      },\n      (res) => res.parsedBody.result\n    );\n  }\n\n  /**\n   * Sets the given ArangoDB user's access level for the database, or the\n   * given collection in the given database.\n   *\n   * @param username - Name of the ArangoDB user to set the access level for.\n   * @param options - Database and/or collection to set the access level for.\n   * @param grant - Access level to set for the given user.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * await db.setUserAccessLevel(\"steve\", { grant: \"rw\" });\n   * // The user \"steve\" now has read-write access to the current database.\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * await db.setUserAccessLevel(\"steve\", {\n   *   database: \"staging\",\n   *   grant: \"rw\"\n   * });\n   * // The user \"steve\" now has read-write access to the \"staging\" database.\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * await db.setUserAccessLevel(\"steve\", {\n   *   collection: \"pokemons\",\n   *   grant: \"rw\"\n   * });\n   * // The user \"steve\" now has read-write access to the \"pokemons\" collection\n   * // in the current database.\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * await db.setUserAccessLevel(\"steve\", {\n   *   database: \"staging\",\n   *   collection: \"pokemons\",\n   *   grant: \"rw\"\n   * });\n   * // The user \"steve\" now has read-write access to the \"pokemons\" collection\n   * // in the \"staging\" database.\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const staging = db.database(\"staging\");\n   * await db.setUserAccessLevel(\"steve\", {\n   *   database: staging,\n   *   grant: \"rw\"\n   * });\n   * // The user \"steve\" now has read-write access to the \"staging\" database.\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const staging = db.database(\"staging\");\n   * await db.setUserAccessLevel(\"steve\", {\n   *   collection: staging.collection(\"pokemons\"),\n   *   grant: \"rw\"\n   * });\n   * // The user \"steve\" now has read-write access to the \"pokemons\" collection\n   * // in database \"staging\".\n   * ```\n   */\n  setUserAccessLevel(\n    username: string,\n    options: users.UserAccessLevelOptions,\n    grant: users.AccessLevel\n  ): Promise<connection.ArangoApiResponse<Record<string, users.AccessLevel>>> {\n    const { database, collection } = options;\n    const databaseName = isArangoDatabase(database)\n      ? database.name\n      : (database ??\n        (collection instanceof collections.Collection\n          ? collection.database.name\n          : this._name));\n    const suffix = collection\n      ? `/${encodeURIComponent(\n          collections.isArangoCollection(collection)\n            ? collection.name\n            : collection\n        )}`\n      : \"\";\n    return this.request(\n      {\n        method: \"PUT\",\n        pathname: `/_api/user/${encodeURIComponent(\n          username\n        )}/database/${encodeURIComponent(databaseName)}${suffix}`,\n        body: { grant },\n      },\n      (res) => res.parsedBody\n    );\n  }\n\n  /**\n   * Clears the given ArangoDB user's access level for the database, or the\n   * given collection in the given database.\n   *\n   * @param username - Name of the ArangoDB user to clear the access level for.\n   * @param options - Database and/or collection to clear the access level for.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * await db.clearUserAccessLevel(\"steve\");\n   * // The access level of the user \"steve\" has been cleared for the current\n   * // database.\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * await db.clearUserAccessLevel(\"steve\", { database: \"staging\" });\n   * // The access level of the user \"steve\" has been cleared for the \"staging\"\n   * // database.\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * await db.clearUserAccessLevel(\"steve\", { collection: \"pokemons\" });\n   * // The access level of the user \"steve\" has been cleared for the\n   * // \"pokemons\" collection in the current database.\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * await db.clearUserAccessLevel(\"steve\", {\n   *   database: \"staging\",\n   *   collection: \"pokemons\"\n   * });\n   * // The access level of the user \"steve\" has been cleared for the\n   * // \"pokemons\" collection in the \"staging\" database.\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const staging = db.database(\"staging\");\n   * await db.clearUserAccessLevel(\"steve\", { database: staging });\n   * // The access level of the user \"steve\" has been cleared for the \"staging\"\n   * // database.\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const staging = db.database(\"staging\");\n   * await db.clearUserAccessLevel(\"steve\", {\n   *   collection: staging.collection(\"pokemons\")\n   * });\n   * // The access level of the user \"steve\" has been cleared for the\n   * // \"pokemons\" collection in database \"staging\".\n   * ```\n   */\n  clearUserAccessLevel(\n    username: string,\n    options: users.UserAccessLevelOptions\n  ): Promise<connection.ArangoApiResponse<Record<string, users.AccessLevel>>> {\n    const { database, collection } = options;\n    const databaseName = isArangoDatabase(database)\n      ? database.name\n      : (database ??\n        (collection instanceof collections.Collection\n          ? collection.database.name\n          : this._name));\n    const suffix = collection\n      ? `/${encodeURIComponent(\n          collections.isArangoCollection(collection)\n            ? collection.name\n            : collection\n        )}`\n      : \"\";\n    return this.request(\n      {\n        method: \"DELETE\",\n        pathname: `/_api/user/${encodeURIComponent(\n          username\n        )}/database/${encodeURIComponent(databaseName)}${suffix}`,\n      },\n      (res) => res.parsedBody\n    );\n  }\n\n  /**\n   * Fetches an object mapping names of databases to the access level of the\n   * given ArangoDB user for those databases.\n   *\n   * @param username - Name of the ArangoDB user to fetch the access levels for.\n   * @param full - Whether access levels for collections should be included.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const accessLevels = await db.getUserDatabases(\"steve\");\n   * for (const [databaseName, accessLevel] of Object.entries(accessLevels)) {\n   *   console.log(`${databaseName}: ${accessLevel}`);\n   * }\n   * ```\n   */\n  getUserDatabases(\n    username: string,\n    full?: false\n  ): Promise<Record<string, users.AccessLevel>>;\n  /**\n   * Fetches an object mapping names of databases to the access level of the\n   * given ArangoDB user for those databases and the collections within each\n   * database.\n   *\n   * @param username - Name of the ArangoDB user to fetch the access levels for.\n   * @param full - Whether access levels for collections should be included.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const accessLevels = await db.getUserDatabases(\"steve\", true);\n   * for (const [databaseName, obj] of Object.entries(accessLevels)) {\n   *   console.log(`${databaseName}: ${obj.permission}`);\n   *   for (const [collectionName, accessLevel] of Object.entries(obj.collections)) {\n   *     console.log(`${databaseName}/${collectionName}: ${accessLevel}`);\n   *   }\n   * }\n   * ```\n   */\n  getUserDatabases(\n    username: string,\n    full: true\n  ): Promise<\n    Record<\n      string,\n      {\n        permission: users.AccessLevel;\n        collections: Record<string, users.AccessLevel | \"undefined\">;\n      }\n    >\n  >;\n  getUserDatabases(username: string, full?: boolean) {\n    return this.request(\n      {\n        pathname: `/_api/user/${encodeURIComponent(username)}/database`,\n        search: { full },\n      },\n      (res) => res.parsedBody.result\n    );\n  }\n  //#endregion\n\n  //#region transactions\n  /**\n   * Performs a server-side JavaScript transaction and returns its return\n   * value.\n   *\n   * Collections can be specified as collection names (strings) or objects\n   * implementing the {@link collections.ArangoCollection} interface: `Collection`,\n   * {@link graphs.GraphVertexCollection}, {@link graphs.GraphEdgeCollection} as well as\n   * (in TypeScript) {@link collections.DocumentCollection} and {@link collections.EdgeCollection}.\n   *\n   * **Note**: The `action` function will be evaluated and executed on the\n   * server inside ArangoDB's embedded JavaScript environment and can not\n   * access any values other than those passed via the `params` option.\n   *\n   * See the official ArangoDB documentation for\n   * [the JavaScript `@arangodb` module](https://www.arangodb.com/docs/stable/appendix-java-script-modules-arango-db.html)\n   * for information about accessing the database from within ArangoDB's\n   * server-side JavaScript environment.\n   *\n   * @param collections - Collections involved in the transaction.\n   * @param action - A string evaluating to a JavaScript function to be\n   * executed on the server.\n   * @param options - Options for the transaction. If `options.allowImplicit`\n   * is specified, it will be used if `collections.allowImplicit` was not\n   * specified.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   *\n   * const action = `\n   *   function(params) {\n   *     // This code will be executed inside ArangoDB!\n   *     const { query } = require(\"@arangodb\");\n   *     return query\\`\n   *         FOR user IN _users\n   *         FILTER user.age > ${params.age}\n   *         RETURN u.user\n   *       \\`.toArray();\n   *   }\n   * `);\n   *\n   * const result = await db.executeTransaction({\n   *   read: [\"_users\"]\n   * }, action, {\n   *   params: { age: 12 }\n   * });\n   * // result contains the return value of the action\n   * ```\n   */\n  executeTransaction(\n    collections: transactions.TransactionCollectionOptions & {\n      allowImplicit?: boolean;\n    },\n    action: string,\n    options?: transactions.TransactionOptions & { params?: any }\n  ): Promise<any>;\n  /**\n   * Performs a server-side transaction and returns its return value.\n   *\n   * Collections can be specified as collection names (strings) or objects\n   * implementing the {@link collections.ArangoCollection} interface: `Collection`,\n   * {@link graphs.GraphVertexCollection}, {@link graphs.GraphEdgeCollection} as well as\n   * (in TypeScript) {@link collections.DocumentCollection} and {@link collections.EdgeCollection}.\n   *\n   * **Note**: The `action` function will be evaluated and executed on the\n   * server inside ArangoDB's embedded JavaScript environment and can not\n   * access any values other than those passed via the `params` option.\n   * See the official ArangoDB documentation for\n   * [the JavaScript `@arangodb` module](https://www.arangodb.com/docs/stable/appendix-java-script-modules-arango-db.html)\n   * for information about accessing the database from within ArangoDB's\n   * server-side JavaScript environment.\n   *\n   * @param collections - Collections that can be read from and written to\n   * during the transaction.\n   * @param action - A string evaluating to a JavaScript function to be\n   * executed on the server.\n   * @param options - Options for the transaction.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   *\n   * const action = `\n   *   function(params) {\n   *     // This code will be executed inside ArangoDB!\n   *     const { query } = require(\"@arangodb\");\n   *     return query\\`\n   *         FOR user IN _users\n   *         FILTER user.age > ${params.age}\n   *         RETURN u.user\n   *       \\`.toArray();\n   *   }\n   * `);\n   *\n   * const result = await db.executeTransaction([\"_users\"], action, {\n   *   params: { age: 12 }\n   * });\n   * // result contains the return value of the action\n   * ```\n   */\n  executeTransaction(\n    collections: (string | collections.ArangoCollection)[],\n    action: string,\n    options?: transactions.TransactionOptions & { params?: any }\n  ): Promise<any>;\n  /**\n   * Performs a server-side transaction and returns its return value.\n   *\n   * The Collection can be specified as a collection name (string) or an object\n   * implementing the {@link collections.ArangoCollection} interface: `Collection`,\n   * {@link graphs.GraphVertexCollection}, {@link graphs.GraphEdgeCollection} as well as\n   * (in TypeScript) {@link collections.DocumentCollection} and {@link collections.EdgeCollection}.\n   *\n   * **Note**: The `action` function will be evaluated and executed on the\n   * server inside ArangoDB's embedded JavaScript environment and can not\n   * access any values other than those passed via the `params` option.\n   * See the official ArangoDB documentation for\n   * [the JavaScript `@arangodb` module](https://www.arangodb.com/docs/stable/appendix-java-script-modules-arango-db.html)\n   * for information about accessing the database from within ArangoDB's\n   * server-side JavaScript environment.\n   *\n   * @param collection - A collection that can be read from and written to\n   * during the transaction.\n   * @param action - A string evaluating to a JavaScript function to be\n   * executed on the server.\n   * @param options - Options for the transaction.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   *\n   * const action = `\n   *   function(params) {\n   *     // This code will be executed inside ArangoDB!\n   *     const { query } = require(\"@arangodb\");\n   *     return query\\`\n   *         FOR user IN _users\n   *         FILTER user.age > ${params.age}\n   *         RETURN u.user\n   *       \\`.toArray();\n   *   }\n   * `);\n   *\n   * const result = await db.executeTransaction(\"_users\", action, {\n   *   params: { age: 12 }\n   * });\n   * // result contains the return value of the action\n   * ```\n   */\n  executeTransaction(\n    collection: string | collections.ArangoCollection,\n    action: string,\n    options?: transactions.TransactionOptions & { params?: any }\n  ): Promise<any>;\n  executeTransaction(\n    collections:\n      | (transactions.TransactionCollectionOptions & {\n          allowImplicit?: boolean;\n        })\n      | (string | collections.ArangoCollection)[]\n      | string\n      | collections.ArangoCollection,\n    action: string,\n    options: transactions.TransactionOptions & { params?: any } = {}\n  ): Promise<any> {\n    const { allowDirtyRead = undefined, ...opts } = options;\n    return this.request(\n      {\n        method: \"POST\",\n        pathname: \"/_api/transaction\",\n        allowDirtyRead,\n        body: {\n          collections: transactions.coerceTransactionCollections(collections),\n          action,\n          ...opts,\n        },\n      },\n      (res) => res.parsedBody.result\n    );\n  }\n\n  /**\n   * Returns a {@link transactions.Transaction} instance for an existing streaming\n   * transaction with the given `id`.\n   *\n   * See also {@link Database#beginTransaction}.\n   *\n   * @param transactionId - The `id` of an existing stream transaction.\n   *\n   * @example\n   * ```js\n   * const trx1 = await db.beginTransaction(collections);\n   * const id = trx1.id;\n   * // later\n   * const trx2 = db.transaction(id);\n   * await trx2.commit();\n   * ```\n   */\n  transaction(transactionId: string): transactions.Transaction {\n    return new transactions.Transaction(this, transactionId);\n  }\n\n  /**\n   * Begins a new streaming transaction for the given collections, then returns\n   * a {@link transactions.Transaction} instance for the transaction.\n   *\n   * Collections can be specified as collection names (strings) or objects\n   * implementing the {@link collections.ArangoCollection} interface: `Collection`,\n   * {@link graphs.GraphVertexCollection}, {@link graphs.GraphEdgeCollection} as\n   * well as (in TypeScript) {@link collections.DocumentCollection} and\n   * {@link collections.EdgeCollection}.\n   *\n   * @param collections - Collections involved in the transaction.\n   * @param options - Options for the transaction.\n   *\n   * @example\n   * ```js\n   * const vertices = db.collection(\"vertices\");\n   * const edges = db.collection(\"edges\");\n   * const trx = await db.beginTransaction({\n   *   read: [\"vertices\"],\n   *   write: [edges] // collection instances can be passed directly\n   * });\n   * const start = await trx.step(() => vertices.document(\"a\"));\n   * const end = await trx.step(() => vertices.document(\"b\"));\n   * await trx.step(() => edges.save({ _from: start._id, _to: end._id }));\n   * await trx.commit();\n   * ```\n   */\n  beginTransaction(\n    collections: transactions.TransactionCollectionOptions,\n    options?: transactions.TransactionOptions\n  ): Promise<transactions.Transaction>;\n  /**\n   * Begins a new streaming transaction for the given collections, then returns\n   * a {@link transactions.Transaction} instance for the transaction.\n   *\n   * Collections can be specified as collection names (strings) or objects\n   * implementing the {@link collections.ArangoCollection} interface: `Collection`,\n   * {@link graphs.GraphVertexCollection}, {@link graphs.GraphEdgeCollection} as well as\n   * (in TypeScript) {@link collections.DocumentCollection} and {@link collections.EdgeCollection}.\n   *\n   * @param collections - Collections that can be read from and written to\n   * during the transaction.\n   * @param options - Options for the transaction.\n   *\n   * @example\n   * ```js\n   * const vertices = db.collection(\"vertices\");\n   * const edges = db.collection(\"edges\");\n   * const trx = await db.beginTransaction([\n   *   \"vertices\",\n   *   edges // collection instances can be passed directly\n   * ]);\n   * const start = await trx.step(() => vertices.document(\"a\"));\n   * const end = await trx.step(() => vertices.document(\"b\"));\n   * await trx.step(() => edges.save({ _from: start._id, _to: end._id }));\n   * await trx.commit();\n   * ```\n   */\n  beginTransaction(\n    collections: (string | collections.ArangoCollection)[],\n    options?: transactions.TransactionOptions\n  ): Promise<transactions.Transaction>;\n  /**\n   * Begins a new streaming transaction for the given collections, then returns\n   * a {@link transactions.Transaction} instance for the transaction.\n   *\n   * The Collection can be specified as a collection name (string) or an object\n   * implementing the {@link collections.ArangoCollection} interface: `Collection`,\n   * {@link graphs.GraphVertexCollection}, {@link graphs.GraphEdgeCollection} as well as\n   * (in TypeScript) {@link collections.DocumentCollection} and {@link collections.EdgeCollection}.\n   *\n   * @param collection - A collection that can be read from and written to\n   * during the transaction.\n   * @param options - Options for the transaction.\n   *\n   * @example\n   * ```js\n   * const vertices = db.collection(\"vertices\");\n   * const start = vertices.document(\"a\");\n   * const end = vertices.document(\"b\");\n   * const edges = db.collection(\"edges\");\n   * const trx = await db.beginTransaction(\n   *   edges // collection instances can be passed directly\n   * );\n   * await trx.step(() => edges.save({ _from: start._id, _to: end._id }));\n   * await trx.commit();\n   * ```\n   */\n  beginTransaction(\n    collection: string | collections.ArangoCollection,\n    options?: transactions.TransactionOptions\n  ): Promise<transactions.Transaction>;\n  beginTransaction(\n    collections:\n      | transactions.TransactionCollectionOptions\n      | (string | collections.ArangoCollection)[]\n      | string\n      | collections.ArangoCollection,\n    options: transactions.TransactionOptions = {}\n  ): Promise<transactions.Transaction> {\n    const { allowDirtyRead = undefined, ...opts } = options;\n    return this.request(\n      {\n        method: \"POST\",\n        pathname: \"/_api/transaction/begin\",\n        allowDirtyRead,\n        body: {\n          collections: transactions.coerceTransactionCollections(collections),\n          ...opts,\n        },\n      },\n      (res) => new transactions.Transaction(this, res.parsedBody.result.id)\n    );\n  }\n\n  /**\n   * Begins and commits a transaction using the given callback. Individual\n   * requests that are part of the transaction need to be wrapped in the step\n   * function passed into the callback. If the promise returned by the callback\n   * is rejected, the transaction will be aborted.\n   *\n   * Collections can be specified as collection names (strings) or objects\n   * implementing the {@link collections.ArangoCollection} interface: `Collection`,\n   * {@link graphs.GraphVertexCollection}, {@link graphs.GraphEdgeCollection} as\n   * well as (in TypeScript) {@link collections.DocumentCollection} and\n   * {@link collections.EdgeCollection}.\n   *\n   * @param collections - Collections involved in the transaction.\n   * @param callback - Callback function executing the transaction steps.\n   * @param options - Options for the transaction.\n   *\n   * @example\n   * ```js\n   * const vertices = db.collection(\"vertices\");\n   * const edges = db.collection(\"edges\");\n   * await db.withTransaction(\n   *   {\n   *     read: [\"vertices\"],\n   *     write: [edges] // collection instances can be passed directly\n   *   },\n   *   async (step) => {\n   *     const start = await step(() => vertices.document(\"a\"));\n   *     const end = await step(() => vertices.document(\"b\"));\n   *     await step(() => edges.save({ _from: start._id, _to: end._id }));\n   *   }\n   * );\n   * ```\n   */\n  withTransaction<T>(\n    collections: transactions.TransactionCollectionOptions,\n    callback: (step: transactions.Transaction[\"step\"]) => Promise<T>,\n    options?: transactions.TransactionOptions\n  ): Promise<T>;\n  /**\n   * Begins and commits a transaction using the given callback. Individual\n   * requests that are part of the transaction need to be wrapped in the step\n   * function passed into the callback. If the promise returned by the callback\n   * is rejected, the transaction will be aborted.\n   *\n   * Collections can be specified as collection names (strings) or objects\n   * implementing the {@link collections.ArangoCollection} interface: `Collection`,\n   * {@link graphs.GraphVertexCollection}, {@link graphs.GraphEdgeCollection} as well as\n   * (in TypeScript) {@link collections.DocumentCollection} and {@link collections.EdgeCollection}.\n   *\n   * @param collections - Collections that can be read from and written to\n   * during the transaction.\n   * @param callback - Callback function executing the transaction steps.\n   * @param options - Options for the transaction.\n   *\n   * @example\n   * ```js\n   * const vertices = db.collection(\"vertices\");\n   * const edges = db.collection(\"edges\");\n   * await db.withTransaction(\n   *   [\n   *     \"vertices\",\n   *     edges, // collection instances can be passed directly\n   *   ],\n   *   async (step) => {\n   *     const start = await step(() => vertices.document(\"a\"));\n   *     const end = await step(() => vertices.document(\"b\"));\n   *     await step(() => edges.save({ _from: start._id, _to: end._id }));\n   *   }\n   * );\n   * ```\n   */\n  withTransaction<T>(\n    collections: (string | collections.ArangoCollection)[],\n    callback: (step: transactions.Transaction[\"step\"]) => Promise<T>,\n    options?: transactions.TransactionOptions\n  ): Promise<T>;\n  /**\n   * Begins and commits a transaction using the given callback. Individual\n   * requests that are part of the transaction need to be wrapped in the step\n   * function passed into the callback. If the promise returned by the callback\n   * is rejected, the transaction will be aborted.\n   *\n   * The Collection can be specified as a collection name (string) or an object\n   * implementing the {@link collections.ArangoCollection} interface: `Collection`,\n   * {@link graphs.GraphVertexCollection}, {@link graphs.GraphEdgeCollection} as well as\n   * (in TypeScript) {@link collections.DocumentCollection} and {@link collections.EdgeCollection}.\n   *\n   * @param collection - A collection that can be read from and written to\n   * during the transaction.\n   * @param callback - Callback function executing the transaction steps.\n   * @param options - Options for the transaction.\n   *\n   * @example\n   * ```js\n   * const vertices = db.collection(\"vertices\");\n   * const start = vertices.document(\"a\");\n   * const end = vertices.document(\"b\");\n   * const edges = db.collection(\"edges\");\n   * await db.withTransaction(\n   *   edges, // collection instances can be passed directly\n   *   async (step) => {\n   *     await step(() => edges.save({ _from: start._id, _to: end._id }));\n   *   }\n   * );\n   * ```\n   */\n  withTransaction<T>(\n    collection: string | collections.ArangoCollection,\n    callback: (step: transactions.Transaction[\"step\"]) => Promise<T>,\n    options?: transactions.TransactionOptions\n  ): Promise<T>;\n  async withTransaction<T>(\n    collections:\n      | transactions.TransactionCollectionOptions\n      | (string | collections.ArangoCollection)[]\n      | string\n      | collections.ArangoCollection,\n    callback: (step: transactions.Transaction[\"step\"]) => Promise<T>,\n    options: transactions.TransactionOptions = {}\n  ): Promise<T> {\n    const trx = await this.beginTransaction(\n      collections as transactions.TransactionCollectionOptions,\n      options\n    );\n    try {\n      const result = await callback((fn) => trx.step(fn));\n      await trx.commit();\n      return result;\n    } catch (e) {\n      try {\n        await trx.abort();\n      } catch {}\n      throw e;\n    }\n  }\n\n  /**\n   * Fetches all active transactions from the database and returns an array of\n   * transaction descriptions.\n   *\n   * See also {@link Database#transactions}.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const transactions = await db.listTransactions();\n   * // transactions is an array of transaction descriptions\n   * ```\n   */\n  listTransactions(): Promise<transactions.TransactionDescription[]> {\n    return this._connection.request(\n      { pathname: \"/_api/transaction\" },\n      (res) => res.parsedBody.transactions\n    );\n  }\n\n  /**\n   * Fetches all active transactions from the database and returns an array of\n   * {@link transactions.Transaction} instances for those transactions.\n   *\n   * See also {@link Database#listTransactions}.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const transactions = await db.transactions();\n   * // transactions is an array of transactions\n   * ```\n   */\n  async transactions(): Promise<transactions.Transaction[]> {\n    const transactions = await this.listTransactions();\n    return transactions.map((data) => this.transaction(data.id));\n  }\n  //#endregion\n\n  //#region queries\n  /**\n   * Performs a database query using the given `query`, then returns a new\n   * {@link cursors.Cursor} instance for the result set.\n   *\n   * See the {@link aql.aql} template string handler for information about how\n   * to create a query string without manually defining bind parameters nor\n   * having to worry about escaping variables.\n   *\n   * **Note**: When executing a query in a streaming transaction using the\n   * `step` method, the resulting cursor will be bound to that transaction and\n   * you do not need to use the `step` method to consume it.\n   *\n   * @param query - An object containing an AQL query string and bind\n   * parameters, e.g. the object returned from an {@link aql.aql} template string.\n   * @param options - Options for the query execution.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const active = true;\n   * const Users = db.collection(\"_users\");\n   *\n   * // Using an aql template string:\n   * // Bind parameters are automatically extracted and arangojs collections\n   * // are automatically passed as collection bind parameters.\n   * const cursor = await db.query(aql`\n   *   FOR u IN ${Users}\n   *   FILTER u.authData.active == ${active}\n   *   RETURN u.user\n   * `);\n   * // cursor is a cursor for the query result\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const active = true;\n   * const Users = db.collection(\"_users\");\n   *\n   * // Using an object with a regular multi-line string\n   * const cursor = await db.query({\n   *   query: `\n   *     FOR u IN @@users\n   *     FILTER u.authData.active == @active\n   *     RETURN u.user\n   *   `,\n   *   bindVars: { active: active, \"@users\": Users.name }\n   * });\n   * ```\n   */\n  query<T = any>(\n    query: aql.AqlQuery<T>,\n    options?: queries.QueryOptions\n  ): Promise<cursors.Cursor<T>>;\n  /**\n   * Performs a database query using the given `query` and `bindVars`, then\n   * returns a new {@link cursors.Cursor} instance for the result set.\n   *\n   * See the {@link aql.aql} template string handler for a safer and easier\n   * alternative to passing strings directly.\n   *\n   * **Note**: When executing a query in a streaming transaction using the\n   * `step` method, the resulting cursor will be bound to that transaction and\n   * you do not need to use the `step` method to consume it.\n   *\n   * @param query - An AQL query string.\n   * @param bindVars - An object defining bind parameters for the query.\n   * @param options - Options for the query execution.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const active = true;\n   * const Users = db.collection(\"_users\");\n   *\n   * const cursor = await db.query(\n   *   // A normal multi-line string\n   *   `\n   *     FOR u IN @@users\n   *     FILTER u.authData.active == @active\n   *     RETURN u.user\n   *   `,\n   *   { active: active, \"@users\": Users.name }\n   * );\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const active = true;\n   * const Users = db.collection(\"_users\");\n   *\n   * const cursor = await db.query(\n   *   // An AQL literal created from a normal multi-line string\n   *   aql.literal(`\n   *     FOR u IN @@users\n   *     FILTER u.authData.active == @active\n   *     RETURN u.user\n   *   `),\n   *   { active: active, \"@users\": Users.name }\n   * );\n   * ```\n   */\n  query<T = any>(\n    query: string | aql.AqlLiteral,\n    bindVars?: Record<string, any>,\n    options?: queries.QueryOptions\n  ): Promise<cursors.Cursor<T>>;\n  query<T = any>(\n    query: string | aql.AqlQuery | aql.AqlLiteral,\n    bindVars?: Record<string, any>,\n    options: queries.QueryOptions = {}\n  ): Promise<cursors.Cursor<T>> {\n    if (aql.isAqlQuery(query)) {\n      options = bindVars ?? {};\n      bindVars = query.bindVars;\n      query = query.query;\n    } else if (aql.isAqlLiteral(query)) {\n      query = query.toAQL();\n    }\n    const {\n      allowDirtyRead,\n      retryOnConflict,\n      count,\n      batchSize,\n      cache,\n      memoryLimit,\n      ttl,\n      timeout,\n      ...opts\n    } = options;\n    return this.request(\n      {\n        method: \"POST\",\n        pathname: \"/_api/cursor\",\n        body: {\n          query,\n          bindVars,\n          count,\n          batchSize,\n          cache,\n          memoryLimit,\n          ttl,\n          options: opts,\n        },\n        allowDirtyRead,\n        retryOnConflict,\n        timeout,\n      },\n      (res) =>\n        new cursors.BatchCursor<T>(\n          this,\n          res.parsedBody,\n          res.arangojsHostUrl,\n          allowDirtyRead\n        ).items\n    );\n  }\n\n  /**\n   * Explains a database query using the given `query`.\n   *\n   * See the {@link aql.aql} template string handler for information about how\n   * to create a query string without manually defining bind parameters nor\n   * having to worry about escaping variables.\n   *\n   * @param query - An object containing an AQL query string and bind\n   * parameters, e.g. the object returned from an {@link aql.aql} template string.\n   * @param options - Options for explaining the query.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * const explanation = await db.explain(aql`\n   *   FOR doc IN ${collection}\n   *   FILTER doc.flavor == \"strawberry\"\n   *   RETURN doc._key\n   * `);\n   * ```\n   */\n  explain(\n    query: aql.AqlQuery,\n    options?: queries.ExplainOptions & { allPlans?: false }\n  ): Promise<connection.ArangoApiResponse<queries.SingleExplainResult>>;\n  /**\n   * Explains a database query using the given `query`.\n   *\n   * See the {@link aql.aql} template string handler for information about how\n   * to create a query string without manually defining bind parameters nor\n   * having to worry about escaping variables.\n   *\n   * @param query - An object containing an AQL query string and bind\n   * parameters, e.g. the object returned from an {@link aql.aql} template string.\n   * @param options - Options for explaining the query.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * const explanation = await db.explain(\n   *   aql`\n   *     FOR doc IN ${collection}\n   *     FILTER doc.flavor == \"strawberry\"\n   *     RETURN doc._key\n   *   `,\n   *   { allPlans: true }\n   * );\n   * ```\n   */\n  explain(\n    query: aql.AqlQuery,\n    options?: queries.ExplainOptions & { allPlans: true }\n  ): Promise<connection.ArangoApiResponse<queries.MultiExplainResult>>;\n  /**\n   * Explains a database query using the given `query` and `bindVars`.\n   *\n   * See the {@link aql.aql} template string handler for a safer and easier\n   * alternative to passing strings directly.\n   *\n   * @param query - An AQL query string.\n   * @param bindVars - An object defining bind parameters for the query.\n   * @param options - Options for explaining the query.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * const explanation = await db.explain(\n   *   `\n   *     FOR doc IN @@collection\n   *     FILTER doc.flavor == \"strawberry\"\n   *     RETURN doc._key\n   *   `,\n   *   { \"@collection\": collection.name }\n   * );\n   * ```\n   */\n  explain(\n    query: string | aql.AqlLiteral,\n    bindVars?: Record<string, any>,\n    options?: queries.ExplainOptions & { allPlans?: false }\n  ): Promise<connection.ArangoApiResponse<queries.SingleExplainResult>>;\n  /**\n   * Explains a database query using the given `query` and `bindVars`.\n   *\n   * See the {@link aql.aql} template string handler for a safer and easier\n   * alternative to passing strings directly.\n   *\n   * @param query - An AQL query string.\n   * @param bindVars - An object defining bind parameters for the query.\n   * @param options - Options for explaining the query.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * const explanation = await db.explain(\n   *   `\n   *     FOR doc IN @@collection\n   *     FILTER doc.flavor == \"strawberry\"\n   *     RETURN doc._key\n   *   `,\n   *   { \"@collection\": collection.name },\n   *   { allPlans: true }\n   * );\n   * ```\n   */\n  explain(\n    query: string | aql.AqlLiteral,\n    bindVars?: Record<string, any>,\n    options?: queries.ExplainOptions & { allPlans: true }\n  ): Promise<connection.ArangoApiResponse<queries.MultiExplainResult>>;\n  explain(\n    query: string | aql.AqlQuery | aql.AqlLiteral,\n    bindVars?: Record<string, any>,\n    options?: queries.ExplainOptions\n  ): Promise<\n    connection.ArangoApiResponse<\n      queries.SingleExplainResult | queries.MultiExplainResult\n    >\n  > {\n    if (aql.isAqlQuery(query)) {\n      options = bindVars;\n      bindVars = query.bindVars;\n      query = query.query;\n    } else if (aql.isAqlLiteral(query)) {\n      query = query.toAQL();\n    }\n    return this.request({\n      method: \"POST\",\n      pathname: \"/_api/explain\",\n      body: { query, bindVars, options },\n    });\n  }\n\n  /**\n   * Parses the given query and returns the result.\n   *\n   * See the {@link aql.aql} template string handler for information about how\n   * to create a query string without manually defining bind parameters nor\n   * having to worry about escaping variables.\n   *\n   * @param query - An AQL query string or an object containing an AQL query\n   * string and bind parameters, e.g. the object returned from an {@link aql.aql}\n   * template string.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const collection = db.collection(\"some-collection\");\n   * const ast = await db.parse(aql`\n   *   FOR doc IN ${collection}\n   *   FILTER doc.flavor == \"strawberry\"\n   *   RETURN doc._key\n   * `);\n   * ```\n   aql.*/\n  parse(\n    query: string | aql.AqlQuery | aql.AqlLiteral\n  ): Promise<queries.ParseResult> {\n    if (aql.isAqlQuery(query)) {\n      query = query.query;\n    } else if (aql.isAqlLiteral(query)) {\n      query = query.toAQL();\n    }\n    return this.request({\n      method: \"POST\",\n      pathname: \"/_api/query\",\n      body: { query },\n    });\n  }\n\n  /**\n   * Fetches the available optimizer rules.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const rules = await db.queryRules();\n   * for (const rule of rules) {\n   *   console.log(rule.name);\n   * }\n   * ```\n   */\n  queryRules(): Promise<queries.QueryOptimizerRule[]> {\n    return this.request({\n      pathname: \"/_api/query/rules\",\n    });\n  }\n\n  /**\n   * Fetches the query tracking properties.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const tracking = await db.queryTracking();\n   * console.log(tracking.enabled);\n   * ```\n   */\n  queryTracking(): Promise<queries.QueryTrackingInfo>;\n  /**\n   * Modifies the query tracking properties.\n   *\n   * @param options - Options for query tracking.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * // track up to 5 slow queries exceeding 5 seconds execution time\n   * await db.setQueryTracking({\n   *   enabled: true,\n   *   trackSlowQueries: true,\n   *   maxSlowQueries: 5,\n   *   slowQueryThreshold: 5\n   * });\n   * ```\n   */\n  queryTracking(\n    options: queries.QueryTrackingOptions\n  ): Promise<queries.QueryTrackingInfo>;\n  queryTracking(\n    options?: queries.QueryTrackingOptions\n  ): Promise<queries.QueryTrackingInfo> {\n    return this.request(\n      options\n        ? {\n            method: \"PUT\",\n            pathname: \"/_api/query/properties\",\n            body: options,\n          }\n        : {\n            method: \"GET\",\n            pathname: \"/_api/query/properties\",\n          }\n    );\n  }\n\n  /**\n   * Fetches a list of information for all currently running queries.\n   *\n   * See also {@link Database#listSlowQueries} and {@link Database#killQuery}.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const queries = await db.listRunningQueries();\n   * ```\n   */\n  listRunningQueries(): Promise<queries.QueryDescription[]> {\n    return this.request({\n      method: \"GET\",\n      pathname: \"/_api/query/current\",\n    });\n  }\n\n  /**\n   * Fetches a list of information for all recent slow queries.\n   *\n   * See also {@link Database#listRunningQueries} and\n   * {@link Database#clearSlowQueries}.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const queries = await db.listSlowQueries();\n   * // Only works if slow query tracking is enabled\n   * ```\n   */\n  listSlowQueries(): Promise<queries.QueryDescription[]> {\n    return this.request({\n      method: \"GET\",\n      pathname: \"/_api/query/slow\",\n    });\n  }\n\n  /**\n   * Clears the list of recent slow queries.\n   *\n   * See also {@link Database#listSlowQueries}.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * await db.clearSlowQueries();\n   * // Slow query list is now cleared\n   * ```\n   */\n  clearSlowQueries(): Promise<void> {\n    return this.request(\n      {\n        method: \"DELETE\",\n        pathname: \"/_api/query/slow\",\n      },\n      () => undefined\n    );\n  }\n\n  /**\n   * Kills a running query with the given `queryId`.\n   *\n   * See also {@link Database#listRunningQueries}.\n   *\n   * @param queryId - The ID of a currently running query.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const queries = await db.listRunningQueries();\n   * await Promise.all(queries.map(\n   *   async (query) => {\n   *     if (query.state === \"executing\") {\n   *       await db.killQuery(query.id);\n   *     }\n   *   }\n   * ));\n   * ```\n   */\n  killQuery(queryId: string): Promise<void> {\n    return this.request(\n      {\n        method: \"DELETE\",\n        pathname: `/_api/query/${encodeURIComponent(queryId)}`,\n      },\n      () => undefined\n    );\n  }\n\n  /**\n   * Fetches a list of all entries in the AQL query results cache of the\n   * current database.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const entries = await db.listQueryCacheEntries();\n   * console.log(entries);\n   * ```\n   */\n  listQueryCacheEntries(): Promise<queries.QueryCacheEntry[]> {\n    return this.request({\n      pathname: \"/_api/query-cache/entries\",\n    });\n  }\n\n  /**\n   * Clears the AQL query results cache of the current database.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * await db.clearQueryCache();\n   * // Cache is now cleared\n   * ```\n   */\n  clearQueryCache(): Promise<void> {\n    return this.request(\n      {\n        method: \"DELETE\",\n        pathname: \"/_api/query-cache\",\n      },\n      () => undefined\n    );\n  }\n\n  /**\n   * Fetches the global properties for the AQL query results cache.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const properties = await db.getQueryCacheProperties();\n   * console.log(properties);\n   * ```\n   */\n  getQueryCacheProperties(): Promise<queries.QueryCacheProperties> {\n    return this.request({\n      pathname: \"/_api/query-cache/properties\",\n    });\n  }\n\n  /**\n   * Updates the global properties for the AQL query results cache.\n   *\n   * @param properties - The new properties for the AQL query results cache.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * await db.setQueryCacheProperties({ maxResults: 9000 });\n   * ```\n   */\n  setQueryCacheProperties(\n    properties: queries.QueryCachePropertiesOptions\n  ): Promise<queries.QueryCacheProperties> {\n    return this.request({\n      method: \"PUT\",\n      pathname: \"/_api/query-cache/properties\",\n      body: properties,\n    });\n  }\n  //#endregion\n\n  //#region user functions\n  /**\n   * Fetches a list of all AQL user functions registered with the database.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const functions = await db.listUserFunctions();\n   * const names = functions.map(fn => fn.name);\n   * ```\n   */\n  listUserFunctions(): Promise<queries.UserFunctionDescription[]> {\n    return this.request(\n      { pathname: \"/_api/aqlfunction\" },\n      (res) => res.parsedBody.result\n    );\n  }\n\n  /**\n   * Creates an AQL user function with the given _name_ and _code_ if it does\n   * not already exist or replaces it if a function with the same name already\n   * existed.\n   *\n   * @param name - A valid AQL function name. The function name must consist\n   * of at least two alphanumeric identifiers separated with double colons.\n   * @param code - A string evaluating to a JavaScript function (not a\n   * JavaScript function object).\n   * @param isDeterministic - If set to `true`, the function is expected to\n   * always return the same result for equivalent inputs. This option currently\n   * has no effect but may allow for optimizations in the future.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * await db.createUserFunction(\n   *   \"ACME::ACCOUNTING::CALCULATE_VAT\",\n   *   \"(price) => price * 0.19\"\n   * );\n   * // Use the new function in an AQL query with template handler:\n   * const cursor = await db.query(aql`\n   *   FOR product IN products\n   *   RETURN MERGE(\n   *     { vat: ACME::ACCOUNTING::CALCULATE_VAT(product.price) },\n   *     product\n   *   )\n   * `);\n   * // cursor is a cursor for the query result\n   * ```\n   */\n  createUserFunction(\n    name: string,\n    code: string,\n    isDeterministic: boolean = false\n  ): Promise<connection.ArangoApiResponse<{ isNewlyCreated: boolean }>> {\n    return this.request({\n      method: \"POST\",\n      pathname: \"/_api/aqlfunction\",\n      body: { name, code, isDeterministic },\n    });\n  }\n\n  /**\n   * Deletes the AQL user function with the given name from the database.\n   *\n   * @param name - The name of the user function to drop.\n   * @param group - If set to `true`, all functions with a name starting with\n   * `name` will be deleted, otherwise only the function with the exact name\n   * will be deleted.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * await db.dropUserFunction(\"ACME::ACCOUNTING::CALCULATE_VAT\");\n   * // the function no longer exists\n   * ```\n   */\n  dropUserFunction(\n    name: string,\n    group: boolean = false\n  ): Promise<connection.ArangoApiResponse<{ deletedCount: number }>> {\n    return this.request({\n      method: \"DELETE\",\n      pathname: `/_api/aqlfunction/${encodeURIComponent(name)}`,\n      search: { group },\n    });\n  }\n  //#endregion\n\n  //#region services\n  /**\n   * Fetches a list of all installed service.\n   *\n   * @param excludeSystem - Whether system services should be excluded.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const services = await db.listServices();\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const services = await db.listServices(false); // all services\n   * ```\n   */\n  listServices(\n    excludeSystem: boolean = true\n  ): Promise<services.ServiceSummary[]> {\n    return this.request({\n      pathname: \"/_api/foxx\",\n      search: { excludeSystem },\n    });\n  }\n\n  /**\n   * Installs a new service.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param source - The service bundle to install.\n   * @param options - Options for installing the service.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * // Using a Buffer in Node.js as source\n   * const source = new Blob([await fs.readFileSync(\"./my-foxx-service.zip\")]);\n   * const info = await db.installService(\"/hello\", source);\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * // Using a Blob in Node.js as source\n   * const source = await fs.openAsBlob(\"./my-foxx-service.zip\");\n   * const info = await db.installService(\"/hello\", source);\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * // Using a File from a browser file input as source\n   * const element = document.getElementById(\"my-file-input\");\n   * const source = element.files[0];\n   * const info = await db.installService(\"/hello\", source);\n   * ```\n   */\n  async installService(\n    mount: string,\n    source: Blob | string,\n    options: services.InstallServiceOptions = {}\n  ): Promise<services.ServiceDescription> {\n    const { configuration, dependencies, ...search } = options;\n    const form = new FormData();\n    if (configuration) {\n      form.append(\"configuration\", JSON.stringify(configuration));\n    }\n    if (dependencies) {\n      form.append(\"dependencies\", JSON.stringify(dependencies));\n    }\n    form.append(\n      \"source\",\n      typeof source === \"string\" ? JSON.stringify(source) : source\n    );\n    return await this.request({\n      body: form,\n      method: \"POST\",\n      pathname: \"/_api/foxx\",\n      search: { ...search, mount },\n    });\n  }\n\n  /**\n   * Replaces an existing service with a new service by completely removing the\n   * old service and installing a new service at the same mount point.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param source - The service bundle to install.\n   * @param options - Options for replacing the service.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * // Using a Buffer in Node.js as source\n   * const source = new Blob([await fs.readFileSync(\"./my-foxx-service.zip\")]);\n   * const info = await db.replaceService(\"/hello\", source);\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * // Using a Blob in Node.js as source\n   * const source = await fs.openAsBlob(\"./my-foxx-service.zip\");\n   * const info = await db.replaceService(\"/hello\", source);\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * // Using a File from a browser file input as source\n   * const element = document.getElementById(\"my-file-input\");\n   * const source = element.files[0];\n   * const info = await db.replaceService(\"/hello\", source);\n   * ```\n   */\n  async replaceService(\n    mount: string,\n    source: Blob | string,\n    options: services.ReplaceServiceOptions = {}\n  ): Promise<services.ServiceDescription> {\n    const { configuration, dependencies, ...search } = options;\n    const form = new FormData();\n    if (configuration) {\n      form.append(\"configuration\", JSON.stringify(configuration));\n    }\n    if (dependencies) {\n      form.append(\"dependencies\", JSON.stringify(dependencies));\n    }\n    form.append(\n      \"source\",\n      typeof source === \"string\" ? JSON.stringify(source) : source\n    );\n    return await this.request({\n      body: form,\n      method: \"PUT\",\n      pathname: \"/_api/foxx/service\",\n      search: { ...search, mount },\n    });\n  }\n\n  /**\n   * Replaces an existing service with a new service while retaining the old\n   * service's configuration and dependencies.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param source - The service bundle to install.\n   * @param options - Options for upgrading the service.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * // Using a Buffer in Node.js as source\n   * const source = new Blob([await fs.readFileSync(\"./my-foxx-service.zip\")]);\n   * const info = await db.upgradeService(\"/hello\", source);\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * // Using a Blob in Node.js as source\n   * const source = await fs.openAsBlob(\"./my-foxx-service.zip\");\n   * const info = await db.upgradeService(\"/hello\", source);\n   * ```\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * // Using a File from a browser file input as source\n   * const element = document.getElementById(\"my-file-input\");\n   * const source = element.files[0];\n   * const info = await db.upgradeService(\"/hello\", source);\n   * ```\n   */\n  async upgradeService(\n    mount: string,\n    source: Blob | string,\n    options: services.UpgradeServiceOptions = {}\n  ): Promise<services.ServiceDescription> {\n    const { configuration, dependencies, ...search } = options;\n    const form = new FormData();\n    if (configuration) {\n      form.append(\"configuration\", JSON.stringify(configuration));\n    }\n    if (dependencies) {\n      form.append(\"dependencies\", JSON.stringify(dependencies));\n    }\n    form.append(\n      \"source\",\n      typeof source === \"string\" ? JSON.stringify(source) : source\n    );\n    return await this.request({\n      body: form,\n      method: \"PATCH\",\n      pathname: \"/_api/foxx/service\",\n      search: { ...search, mount },\n    });\n  }\n\n  /**\n   * Completely removes a service from the database.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param options - Options for uninstalling the service.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * await db.uninstallService(\"/my-foxx\");\n   * ```\n   */\n  uninstallService(\n    mount: string,\n    options?: services.UninstallServiceOptions\n  ): Promise<void> {\n    return this.request(\n      {\n        method: \"DELETE\",\n        pathname: \"/_api/foxx/service\",\n        search: { ...options, mount },\n      },\n      () => undefined\n    );\n  }\n\n  /**\n   * Retrieves information about a mounted service.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const info = await db.getService(\"/my-service\");\n   * // info contains detailed information about the service\n   * ```\n   */\n  getService(mount: string): Promise<services.ServiceDescription> {\n    return this.request({\n      pathname: \"/_api/foxx/service\",\n      search: { mount },\n    });\n  }\n\n  /**\n   * Retrieves information about the service's configuration options and their\n   * current values.\n   *\n   * See also {@link Database#replaceServiceConfiguration} and\n   * {@link Database#updateServiceConfiguration}.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param minimal - If set to `true`, the result will only include each\n   * configuration option's current value. Otherwise it will include the full\n   * definition for each option.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const config = await db.getServiceConfiguration(\"/my-service\");\n   * for (const [key, option] of Object.entries(config)) {\n   *   console.log(`${option.title} (${key}): ${option.current}`);\n   * }\n   * ```\n   */\n  getServiceConfiguration(\n    mount: string,\n    minimal?: false\n  ): Promise<Record<string, services.ServiceConfiguration>>;\n  /**\n   * Retrieves information about the service's configuration options and their\n   * current values.\n   *\n   * See also {@link Database#replaceServiceConfiguration} and\n   * {@link Database#updateServiceConfiguration}.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param minimal - If set to `true`, the result will only include each\n   * configuration option's current value. Otherwise it will include the full\n   * definition for each option.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const config = await db.getServiceConfiguration(\"/my-service\", true);\n   * for (const [key, value] of Object.entries(config)) {\n   *   console.log(`${key}: ${value}`);\n   * }\n   * ```\n   */\n  getServiceConfiguration(\n    mount: string,\n    minimal: true\n  ): Promise<Record<string, any>>;\n  getServiceConfiguration(mount: string, minimal: boolean = false) {\n    return this.request({\n      pathname: \"/_api/foxx/configuration\",\n      search: { mount, minimal },\n    });\n  }\n\n  /**\n   * Replaces the configuration of the given service, discarding any existing\n   * values for options not specified.\n   *\n   * See also {@link Database#updateServiceConfiguration} and\n   * {@link Database#getServiceConfiguration}.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param cfg - An object mapping configuration option names to values.\n   * @param minimal - If set to `true`, the result will only include each\n   * configuration option's current value and warning (if any).\n   * Otherwise it will include the full definition for each option.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const config = { currency: \"USD\", locale: \"en-US\" };\n   * const info = await db.replaceServiceConfiguration(\"/my-service\", config);\n   * for (const [key, option] of Object.entries(info)) {\n   *   console.log(`${option.title} (${key}): ${option.value}`);\n   *   if (option.warning) console.warn(`Warning: ${option.warning}`);\n   * }\n   * ```\n   */\n  replaceServiceConfiguration(\n    mount: string,\n    cfg: Record<string, any>,\n    minimal?: false\n  ): Promise<\n    Record<string, services.ServiceConfiguration & { warning?: string }>\n  >;\n  /**\n   * Replaces the configuration of the given service, discarding any existing\n   * values for options not specified.\n   *\n   * See also {@link Database#updateServiceConfiguration} and\n   * {@link Database#getServiceConfiguration}.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param cfg - An object mapping configuration option names to values.\n   * @param minimal - If set to `true`, the result will only include each\n   * configuration option's current value and warning (if any).\n   * Otherwise it will include the full definition for each option.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const config = { currency: \"USD\", locale: \"en-US\" };\n   * const info = await db.replaceServiceConfiguration(\"/my-service\", config);\n   * for (const [key, value] of Object.entries(info.values)) {\n   *   console.log(`${key}: ${value}`);\n   *   if (info.warnings[key]) console.warn(`Warning: ${info.warnings[key]}`);\n   * }\n   * ```\n   */\n  replaceServiceConfiguration(\n    mount: string,\n    cfg: Record<string, any>,\n    minimal: true\n  ): Promise<{\n    values: Record<string, any>;\n    warnings: Record<string, string>;\n  }>;\n  replaceServiceConfiguration(\n    mount: string,\n    cfg: Record<string, any>,\n    minimal: boolean = false\n  ) {\n    return this.request({\n      method: \"PUT\",\n      pathname: \"/_api/foxx/configuration\",\n      body: cfg,\n      search: { mount, minimal },\n    });\n  }\n\n  /**\n   * Updates the configuration of the given service while maintaining any\n   * existing values for options not specified.\n   *\n   * See also {@link Database#replaceServiceConfiguration} and\n   * {@link Database#getServiceConfiguration}.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param cfg - An object mapping configuration option names to values.\n   * @param minimal - If set to `true`, the result will only include each\n   * configuration option's current value and warning (if any).\n   * Otherwise it will include the full definition for each option.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const config = { currency: \"USD\", locale: \"en-US\" };\n   * const info = await db.updateServiceConfiguration(\"/my-service\", config);\n   * for (const [key, option] of Object.entries(info)) {\n   *   console.log(`${option.title} (${key}): ${option.value}`);\n   *   if (option.warning) console.warn(`Warning: ${option.warning}`);\n   * }\n   * ```\n   */\n  updateServiceConfiguration(\n    mount: string,\n    cfg: Record<string, any>,\n    minimal?: false\n  ): Promise<\n    Record<string, services.ServiceConfiguration & { warning?: string }>\n  >;\n  /**\n   * Updates the configuration of the given service while maintaining any\n   * existing values for options not specified.\n   *\n   * See also {@link Database#replaceServiceConfiguration} and\n   * {@link Database#getServiceConfiguration}.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param cfg - An object mapping configuration option names to values.\n   * @param minimal - If set to `true`, the result will only include each\n   * configuration option's current value and warning (if any).\n   * Otherwise it will include the full definition for each option.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const config = { currency: \"USD\", locale: \"en-US\" };\n   * const info = await db.updateServiceConfiguration(\"/my-service\", config);\n   * for (const [key, value] of Object.entries(info.values)) {\n   *   console.log(`${key}: ${value}`);\n   *   if (info.warnings[key]) console.warn(`Warning: ${info.warnings[key]}`);\n   * }\n   * ```\n   */\n  updateServiceConfiguration(\n    mount: string,\n    cfg: Record<string, any>,\n    minimal: true\n  ): Promise<{\n    values: Record<string, any>;\n    warnings: Record<string, string>;\n  }>;\n  updateServiceConfiguration(\n    mount: string,\n    cfg: Record<string, any>,\n    minimal: boolean = false\n  ) {\n    return this.request({\n      method: \"PATCH\",\n      pathname: \"/_api/foxx/configuration\",\n      body: cfg,\n      search: { mount, minimal },\n    });\n  }\n\n  /**\n   * Retrieves information about the service's dependencies and their current\n   * mount points.\n   *\n   * See also {@link Database#replaceServiceDependencies} and\n   * {@link Database#updateServiceDependencies}.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param minimal - If set to `true`, the result will only include each\n   * dependency's current mount point. Otherwise it will include the full\n   * definition for each dependency.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const deps = await db.getServiceDependencies(\"/my-service\");\n   * for (const [key, dep] of Object.entries(deps)) {\n   *   console.log(`${dep.title} (${key}): ${dep.current}`);\n   * }\n   * ```\n   */\n  getServiceDependencies(\n    mount: string,\n    minimal?: false\n  ): Promise<\n    Record<\n      string,\n      services.SingleServiceDependency | services.MultiServiceDependency\n    >\n  >;\n  /**\n   * Retrieves information about the service's dependencies and their current\n   * mount points.\n   *\n   * See also {@link Database#replaceServiceDependencies} and\n   * {@link Database#updateServiceDependencies}.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param minimal - If set to `true`, the result will only include each\n   * dependency's current mount point. Otherwise it will include the full\n   * definition for each dependency.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const deps = await db.getServiceDependencies(\"/my-service\", true);\n   * for (const [key, value] of Object.entries(deps)) {\n   *   console.log(`${key}: ${value}`);\n   * }\n   * ```\n   */\n  getServiceDependencies(\n    mount: string,\n    minimal: true\n  ): Promise<Record<string, string | string[]>>;\n  getServiceDependencies(mount: string, minimal: boolean = false) {\n    return this.request({\n      pathname: \"/_api/foxx/dependencies\",\n      search: { mount, minimal },\n    });\n  }\n\n  /**\n   * Replaces the dependencies of the given service, discarding any existing\n   * mount points for dependencies not specified.\n   *\n   * See also {@link Database#updateServiceDependencies} and\n   * {@link Database#getServiceDependencies}.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param deps - An object mapping dependency aliases to mount points.\n   * @param minimal - If set to `true`, the result will only include each\n   * dependency's current mount point. Otherwise it will include the full\n   * definition for each dependency.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const deps = { mailer: \"/mailer-api\", auth: \"/remote-auth\" };\n   * const info = await db.replaceServiceDependencies(\"/my-service\", deps);\n   * for (const [key, dep] of Object.entries(info)) {\n   *   console.log(`${dep.title} (${key}): ${dep.current}`);\n   *   if (dep.warning) console.warn(`Warning: ${dep.warning}`);\n   * }\n   * ```\n   */\n  replaceServiceDependencies(\n    mount: string,\n    deps: Record<string, string>,\n    minimal?: false\n  ): Promise<\n    Record<\n      string,\n      (services.SingleServiceDependency | services.MultiServiceDependency) & {\n        warning?: string;\n      }\n    >\n  >;\n  /**\n   * Replaces the dependencies of the given service, discarding any existing\n   * mount points for dependencies not specified.\n   *\n   * See also {@link Database#updateServiceDependencies} and\n   * {@link Database#getServiceDependencies}.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param deps - An object mapping dependency aliases to mount points.\n   * @param minimal - If set to `true`, the result will only include each\n   * dependency's current mount point. Otherwise it will include the full\n   * definition for each dependency.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const deps = { mailer: \"/mailer-api\", auth: \"/remote-auth\" };\n   * const info = await db.replaceServiceDependencies(\n   *   \"/my-service\",\n   *   deps,\n   *   true\n   * );\n   * for (const [key, value] of Object.entries(info)) {\n   *   console.log(`${key}: ${value}`);\n   *   if (info.warnings[key]) console.warn(`Warning: ${info.warnings[key]}`);\n   * }\n   * ```\n   */\n  replaceServiceDependencies(\n    mount: string,\n    deps: Record<string, string>,\n    minimal: true\n  ): Promise<{\n    values: Record<string, string>;\n    warnings: Record<string, string>;\n  }>;\n  replaceServiceDependencies(\n    mount: string,\n    deps: Record<string, string>,\n    minimal: boolean = false\n  ) {\n    return this.request({\n      method: \"PUT\",\n      pathname: \"/_api/foxx/dependencies\",\n      body: deps,\n      search: { mount, minimal },\n    });\n  }\n\n  /**\n   * Updates the dependencies of the given service while maintaining any\n   * existing mount points for dependencies not specified.\n   *\n   * See also {@link Database#replaceServiceDependencies} and\n   * {@link Database#getServiceDependencies}.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param deps - An object mapping dependency aliases to mount points.\n   * @param minimal - If set to `true`, the result will only include each\n   * dependency's current mount point. Otherwise it will include the full\n   * definition for each dependency.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const deps = { mailer: \"/mailer-api\", auth: \"/remote-auth\" };\n   * const info = await db.updateServiceDependencies(\"/my-service\", deps);\n   * for (const [key, dep] of Object.entries(info)) {\n   *   console.log(`${dep.title} (${key}): ${dep.current}`);\n   *   if (dep.warning) console.warn(`Warning: ${dep.warning}`);\n   * }\n   * ```\n   */\n  updateServiceDependencies(\n    mount: string,\n    deps: Record<string, string>,\n    minimal?: false\n  ): Promise<\n    Record<\n      string,\n      (services.SingleServiceDependency | services.MultiServiceDependency) & {\n        warning?: string;\n      }\n    >\n  >;\n  /**\n   * Updates the dependencies of the given service while maintaining any\n   * existing mount points for dependencies not specified.\n   *\n   * See also {@link Database#replaceServiceDependencies} and\n   * {@link Database#getServiceDependencies}.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param deps - An object mapping dependency aliases to mount points.\n   * @param minimal - If set to `true`, the result will only include each\n   * dependency's current mount point. Otherwise it will include the full\n   * definition for each dependency.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const deps = { mailer: \"/mailer-api\", auth: \"/remote-auth\" };\n   * const info = await db.updateServiceDependencies(\n   *   \"/my-service\",\n   *   deps,\n   *   true\n   * );\n   * for (const [key, value] of Object.entries(info)) {\n   *   console.log(`${key}: ${value}`);\n   *   if (info.warnings[key]) console.warn(`Warning: ${info.warnings[key]}`);\n   * }\n   * ```\n   */\n  updateServiceDependencies(\n    mount: string,\n    deps: Record<string, string>,\n    minimal: true\n  ): Promise<{\n    values: Record<string, string>;\n    warnings: Record<string, string>;\n  }>;\n  updateServiceDependencies(\n    mount: string,\n    deps: Record<string, string>,\n    minimal: boolean = false\n  ) {\n    return this.request({\n      method: \"PATCH\",\n      pathname: \"/_api/foxx/dependencies\",\n      body: deps,\n      search: { mount, minimal },\n    });\n  }\n\n  /**\n   * Enables or disables development mode for the given service.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param enabled - Whether development mode should be enabled or disabled.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * await db.setServiceDevelopmentMode(\"/my-service\", true);\n   * // the service is now in development mode\n   * await db.setServiceDevelopmentMode(\"/my-service\", false);\n   * // the service is now in production mode\n   * ```\n   */\n  setServiceDevelopmentMode(\n    mount: string,\n    enabled: boolean = true\n  ): Promise<services.ServiceDescription> {\n    return this.request({\n      method: enabled ? \"POST\" : \"DELETE\",\n      pathname: \"/_api/foxx/development\",\n      search: { mount },\n    });\n  }\n\n  /**\n   * Retrieves an object mapping script names to their human readable\n   * representations, as defined in the service manifest's \"scripts\" section.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const scripts = await db.getServiceScripts(\"/my-service\");\n   * for (const [name, title] of Object.entries(scripts)) {\n   *   console.log(`${name}: ${title}`);\n   * }\n   * ```\n   */\n  getServiceScripts(mount: string): Promise<Record<string, string>> {\n    return this.request({\n      pathname: \"/_api/foxx/scripts\",\n      search: { mount },\n    });\n  }\n\n  /**\n   * Executes a service script and retrieves its result exposed as\n   * `module.exports` (if any).\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param name - Name of the service script to execute as defined in the\n   * service manifest.\n   * @param params - Arbitrary value that will be exposed to the script as\n   * `argv[0]` in the service context (e.g. `module.context.argv[0]`).\n   * Must be serializable to JSON.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const result = await db.runServiceScript(\n   *   \"/my-service\",\n   *   \"create-user\",\n   *   {\n   *     username: \"service_admin\",\n   *     password: \"hunter2\"\n   *   }\n   * );\n   * ```\n   */\n  runServiceScript(mount: string, name: string, params?: any): Promise<any> {\n    return this.request({\n      method: \"POST\",\n      pathname: `/_api/foxx/scripts/${encodeURIComponent(name)}`,\n      body: params,\n      search: { mount },\n    });\n  }\n\n  /**\n   * Runs the tests of a given service and returns the results using the\n   * \"default\" reporter.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param options - Options for running the tests.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const testReport = await db.runServiceTests(\"/my-foxx\");\n   * ```\n   */\n  runServiceTests(\n    mount: string,\n    options?: {\n      reporter?: \"default\";\n      /**\n       * Whether the reporter should use \"idiomatic\" mode. Has no effect when\n       * using the \"default\" or \"suite\" reporters.\n       */\n      idiomatic?: false;\n      /**\n       * If set, only tests with full names including this exact string will be\n       * executed.\n       */\n      filter?: string;\n    }\n  ): Promise<services.ServiceTestDefaultReport>;\n  /**\n   * Runs the tests of a given service and returns the results using the\n   * \"suite\" reporter, which groups the test result by test suite.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param options - Options for running the tests.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const suiteReport = await db.runServiceTests(\n   *   \"/my-foxx\",\n   *   { reporter: \"suite\" }\n   * );\n   * ```\n   */\n  runServiceTests(\n    mount: string,\n    options: {\n      reporter: \"suite\";\n      /**\n       * Whether the reporter should use \"idiomatic\" mode. Has no effect when\n       * using the \"default\" or \"suite\" reporters.\n       */\n      idiomatic?: false;\n      /**\n       * If set, only tests with full names including this exact string will be\n       * executed.\n       */\n      filter?: string;\n    }\n  ): Promise<services.ServiceTestSuiteReport>;\n  /**\n   * Runs the tests of a given service and returns the results using the\n   * \"stream\" reporter, which represents the results as a sequence of tuples\n   * representing events.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param options - Options for running the tests.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const streamEvents = await db.runServiceTests(\n   *   \"/my-foxx\",\n   *   { reporter: \"stream\" }\n   * );\n   * ```\n   */\n  runServiceTests(\n    mount: string,\n    options: {\n      reporter: \"stream\";\n      /**\n       * Whether the reporter should use \"idiomatic\" mode. If set to `true`,\n       * the results will be returned as a formatted string.\n       */\n      idiomatic?: false;\n      /**\n       * If set, only tests with full names including this exact string will be\n       * executed.\n       */\n      filter?: string;\n    }\n  ): Promise<services.ServiceTestStreamReport>;\n  /**\n   * Runs the tests of a given service and returns the results using the\n   * \"tap\" reporter, which represents the results as an array of strings using\n   * the \"tap\" format.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param options - Options for running the tests.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const tapLines = await db.runServiceTests(\n   *   \"/my-foxx\",\n   *   { reporter: \"tap\" }\n   * );\n   * ```\n   */\n  runServiceTests(\n    mount: string,\n    options: {\n      reporter: \"tap\";\n      /**\n       * Whether the reporter should use \"idiomatic\" mode. If set to `true`,\n       * the results will be returned as a formatted string.\n       */\n      idiomatic?: false;\n      /**\n       * If set, only tests with full names including this exact string will be\n       * executed.\n       */\n      filter?: string;\n    }\n  ): Promise<services.ServiceTestTapReport>;\n  /**\n   * Runs the tests of a given service and returns the results using the\n   * \"xunit\" reporter, which represents the results as an XML document using\n   * the JSONML exchange format.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param options - Options for running the tests.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const jsonML = await db.runServiceTests(\n   *   \"/my-foxx\",\n   *   { reporter: \"xunit\" }\n   * );\n   * ```\n   */\n  runServiceTests(\n    mount: string,\n    options: {\n      reporter: \"xunit\";\n      /**\n       * Whether the reporter should use \"idiomatic\" mode. If set to `true`,\n       * the results will be returned as a formatted string.\n       */\n      idiomatic?: false;\n      /**\n       * If set, only tests with full names including this exact string will be\n       * executed.\n       */\n      filter?: string;\n    }\n  ): Promise<services.ServiceTestXunitReport>;\n  /**\n   * Runs the tests of a given service and returns the results as a string\n   * using the \"stream\" reporter in \"idiomatic\" mode, which represents the\n   * results as a line-delimited JSON stream of tuples representing events.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param options - Options for running the tests.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const streamReport = await db.runServiceTests(\n   *   \"/my-foxx\",\n   *   { reporter: \"stream\", idiomatic: true }\n   * );\n   * ```\n   */\n  runServiceTests(\n    mount: string,\n    options: {\n      reporter: \"stream\";\n      /**\n       * Whether the reporter should use \"idiomatic\" mode. If set to `false`,\n       * the results will be returned as an array of tuples instead of a\n       * string.\n       */\n      idiomatic: true;\n      /**\n       * If set, only tests with full names including this exact string will be\n       * executed.\n       */\n      filter?: string;\n    }\n  ): Promise<string>;\n  /**\n   * Runs the tests of a given service and returns the results as a string\n   * using the \"tap\" reporter in \"idiomatic\" mode, which represents the\n   * results using the \"tap\" format.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param options - Options for running the tests.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const tapReport = await db.runServiceTests(\n   *   \"/my-foxx\",\n   *   { reporter: \"tap\", idiomatic: true }\n   * );\n   * ```\n   */\n  runServiceTests(\n    mount: string,\n    options: {\n      reporter: \"tap\";\n      /**\n       * Whether the reporter should use \"idiomatic\" mode. If set to `false`,\n       * the results will be returned as an array of strings instead of a\n       * single string.\n       */\n      idiomatic: true;\n      /**\n       * If set, only tests with full names including this exact string will be\n       * executed.\n       */\n      filter?: string;\n    }\n  ): Promise<string>;\n  /**\n   * Runs the tests of a given service and returns the results as a string\n   * using the \"xunit\" reporter in \"idiomatic\" mode, which represents the\n   * results as an XML document.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   * @param options - Options for running the tests.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const xml = await db.runServiceTests(\n   *   \"/my-foxx\",\n   *   { reporter: \"xunit\", idiomatic: true }\n   * );\n   * ```\n   */\n  runServiceTests(\n    mount: string,\n    options: {\n      reporter: \"xunit\";\n      /**\n       * Whether the reporter should use \"idiomatic\" mode. If set to `false`,\n       * the results will be returned using the JSONML exchange format\n       * instead of a string.\n       */\n      idiomatic: true;\n      /**\n       * If set, only tests with full names including this exact string will be\n       * executed.\n       */\n      filter?: string;\n    }\n  ): Promise<string>;\n  runServiceTests(\n    mount: string,\n    options?: {\n      reporter?: string;\n      idiomatic?: boolean;\n      filter?: string;\n    }\n  ) {\n    return this.request({\n      method: \"POST\",\n      pathname: \"/_api/foxx/tests\",\n      search: {\n        ...options,\n        mount,\n      },\n    });\n  }\n\n  /**\n   * Retrieves the text content of the service's `README` or `README.md` file.\n   *\n   * Returns `undefined` if no such file could be found.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const readme = await db.getServiceReadme(\"/my-service\");\n   * if (readme !== undefined) console.log(readme);\n   * else console.warn(`No README found.`)\n   * ```\n   */\n  getServiceReadme(mount: string): Promise<string | undefined> {\n    return this.request({\n      pathname: \"/_api/foxx/readme\",\n      search: { mount },\n    });\n  }\n\n  /**\n   * Retrieves an Open API compatible Swagger API description object for the\n   * service installed at the given mount point.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const spec = await db.getServiceDocumentation(\"/my-service\");\n   * // spec is a Swagger API description of the service\n   * ```\n   */\n  getServiceDocumentation(mount: string): Promise<services.SwaggerJson> {\n    return this.request({\n      pathname: \"/_api/foxx/swagger\",\n      search: { mount },\n    });\n  }\n\n  /**\n   * Retrieves a zip bundle containing the service files.\n   *\n   * Returns a `Buffer` in node.js or `Blob` in the browser.\n   *\n   * @param mount - The service's mount point, relative to the database.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const serviceBundle = await db.downloadService(\"/my-foxx\");\n   * ```\n   */\n  downloadService(mount: string): Promise<Buffer | Blob> {\n    return this.request({\n      method: \"POST\",\n      pathname: \"/_api/foxx/download\",\n      search: { mount },\n      expectBinary: true,\n    });\n  }\n\n  /**\n   * Writes all locally available services to the database and updates any\n   * service bundles missing in the database.\n   *\n   * @param replace - If set to `true`, outdated services will also be\n   * committed. This can be used to solve some consistency problems when\n   * service bundles are missing in the database or were deleted manually.\n   *\n   * @example\n   * ```js\n   * await db.commitLocalServiceState();\n   * // all services available on the coordinator have been written to the db\n   * ```\n   *\n   * @example\n   * ```js\n   * await db.commitLocalServiceState(true);\n   * // all service conflicts have been resolved in favor of this coordinator\n   * ```\n   */\n  commitLocalServiceState(replace: boolean = false): Promise<void> {\n    return this.request(\n      {\n        method: \"POST\",\n        pathname: \"/_api/foxx/commit\",\n        search: { replace },\n      },\n      () => undefined\n    );\n  }\n  //#endregion\n  //#region hot backups\n  /**\n   * (Enterprise Edition only.) Creates a hot backup of the entire ArangoDB\n   * deployment including all databases, collections, etc.\n   *\n   * Returns an object describing the backup result.\n   *\n   * @param options - Options for creating the backup.\n   *\n   * @example\n   * ```js\n   * const info = await db.createHotBackup();\n   * // a hot backup has been created\n   * ```\n   */\n  createHotBackup(\n    options: hotBackups.HotBackupOptions = {}\n  ): Promise<hotBackups.HotBackupResult> {\n    return this.request(\n      {\n        method: \"POST\",\n        pathname: \"/_admin/backup/create\",\n        body: options,\n      },\n      (res) => res.parsedBody.result\n    );\n  }\n\n  /**\n   * (Enterprise Edition only.) Retrieves a list of all locally found hot\n   * backups.\n   *\n   * @param id - If specified, only the backup with the given ID will be\n   * returned.\n   *\n   * @example\n   * ```js\n   * const backups = await db.getHotBackups();\n   * for (const backup of backups.list) {\n   *   console.log(backup.id);\n   * }\n   * ```\n   */\n  getHotBackups(id?: string | string[]): Promise<hotBackups.HotBackupList> {\n    return this.request(\n      {\n        method: \"POST\",\n        pathname: \"/_admin/backup/list\",\n        body: id ? { id } : undefined,\n      },\n      (res) => res.parsedBody.result\n    );\n  }\n\n  /**\n   * (Enteprise Edition only.) Restores a consistent local hot backup.\n   *\n   * Returns the directory path of the restored backup.\n   *\n   * @param id - The ID of the backup to restore.\n   *\n   * @example\n   * ```js\n   * await db.restoreHotBackup(\"2023-09-19T15.38.21Z_example\");\n   * // the backup has been restored\n   * ```\n   */\n  restoreHotBackup(id: string): Promise<string> {\n    return this.request(\n      {\n        method: \"POST\",\n        pathname: \"/_admin/backup/restore\",\n        body: { id },\n      },\n      (res) => res.parsedBody.result.previous\n    );\n  }\n\n  /**\n   * (Enterprise Edition only.) Deletes a local hot backup.\n   *\n   * @param id - The ID of the backup to delete.\n   *\n   * @example\n   * ```js\n   * await db.deleteHotBackup(\"2023-09-19T15.38.21Z_example\");\n   * // the backup has been deleted\n   * ```\n   */\n  deleteHotBackup(id: string): Promise<void> {\n    return this.request(\n      {\n        method: \"POST\",\n        pathname: \"/_admin/backup/delete\",\n        body: { id },\n      },\n      () => undefined\n    );\n  }\n  //#endregion\n  //#region logs\n  /**\n   * Retrieves the log messages from the server's global log.\n   *\n   * @param options - Options for retrieving the log entries.\n   *\n   * @example\n   * ```js\n   * const log = await db.getLogEntries();\n   * for (let i = 0; i < log.totalAmount; i++) {\n   *   console.log(`${\n   *     new Date(log.timestamp[i] * 1000).toISOString()\n   *   } - [${LogLevel[log.level[i]]}] ${log.text[i]} (#${log.lid[i]})`);\n   * }\n   * ```\n   */\n  getLogEntries(options?: logs.LogEntriesOptions): Promise<logs.LogEntries> {\n    return this.request(\n      {\n        pathname: \"/_admin/log/entries\",\n        search: options,\n      },\n      (res) => res.parsedBody\n    );\n  }\n\n  /**\n   * Retrieves the log messages from the server's global log.\n   *\n   * @param options - Options for retrieving the log entries.\n   *\n   * @deprecated This endpoint has been deprecated in ArangoDB 3.8.\n   * Use {@link Database#getLogEntries} instead.\n   *\n   * @example\n   * ```js\n   * const messages = await db.listLogMessages();\n   * for (const m of messages) {\n   *   console.log(`${m.date} - [${m.level}] ${m.message} (#${m.id})`);\n   * }\n   * ```\n   */\n  listLogMessages(\n    options?: logs.LogEntriesOptions\n  ): Promise<logs.LogMessage[]> {\n    return this.request(\n      {\n        pathname: \"/_admin/log\",\n        search: options,\n      },\n      (res) => res.parsedBody.messages\n    );\n  }\n\n  /**\n   * Retrieves the server's current log level for each topic.\n   *\n   * @example\n   * ```js\n   * const levels = await db.getLogLevel();\n   * console.log(levels.request); // log level for incoming requests\n   * ```\n   */\n  getLogLevel(): Promise<Record<string, logs.LogLevelSetting>> {\n    return this.request({\n      pathname: \"/_admin/log/level\",\n    });\n  }\n\n  /**\n   * Sets the server's log level for each of the given topics to the given level.\n   *\n   * Any omitted topics will be left unchanged.\n   *\n   * @param levels - An object mapping topic names to log levels.\n   *\n   * @example\n   * ```js\n   * await db.setLogLevel({ request: \"debug\" });\n   * // Debug information will now be logged for each request\n   * ```\n   */\n  setLogLevel(\n    levels: Record<string, logs.LogLevelSetting>\n  ): Promise<Record<string, logs.LogLevelSetting>> {\n    return this.request({\n      method: \"PUT\",\n      pathname: \"/_admin/log/level\",\n      body: levels,\n    });\n  }\n  //#endregion\n  //#region async jobs\n\n  /**\n   * Creates an async job by executing the given callback function. The first\n   * database request performed by the callback will be marked for asynchronous\n   * execution and its result will be made available as an async job.\n   *\n   * Returns a {@link jobs.Job} instance that can be used to retrieve the result\n   * of the callback function once the request has been executed.\n   *\n   * @param callback - Callback function to execute as an async job.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const job = await db.createJob(() => db.collections());\n   * while (!job.isLoaded) {\n   *  await timeout(1000);\n   *  await job.load();\n   * }\n   * // job.result is a list of Collection instances\n   * ```\n   */\n  async createJob<T>(callback: () => Promise<T>): Promise<jobs.Job<T>> {\n    const trap = new Promise<TrappedError | TrappedRequest<T>>(\n      (resolveTrap) => {\n        this._trapRequest = (trapped) => resolveTrap(trapped);\n      }\n    );\n    const eventualResult = callback();\n    const trapped = await trap;\n    if (trapped.error) return eventualResult as Promise<any>;\n    const { jobId, onResolve, onReject } = trapped;\n    return new jobs.Job(\n      this,\n      jobId,\n      (res) => {\n        onResolve(res);\n        return eventualResult;\n      },\n      (e) => {\n        onReject(e);\n        return eventualResult;\n      }\n    );\n  }\n\n  /**\n   * Returns a {@link jobs.Job} instance for the given `jobId`.\n   *\n   * @param jobId - ID of the async job.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const job = db.job(\"12345\");\n   * ```\n   */\n  job(jobId: string): jobs.Job {\n    return new jobs.Job(this, jobId);\n  }\n\n  /**\n   * Returns a list of the IDs of all currently pending async jobs.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const pendingJobs = await db.listPendingJobs();\n   * console.log(pendingJobs); // e.g. [\"12345\", \"67890\"]\n   * ```\n   */\n  listPendingJobs(): Promise<string[]> {\n    return this.request(\n      {\n        pathname: \"/_api/job/pending\",\n      },\n      (res) => res.parsedBody\n    );\n  }\n\n  /**\n   * Returns a list of the IDs of all currently available completed async jobs.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const completedJobs = await db.listCompletedJobs();\n   * console.log(completedJobs); // e.g. [\"12345\", \"67890\"]\n   * ```\n   */\n  listCompletedJobs(): Promise<string[]> {\n    return this.request(\n      {\n        pathname: \"/_api/job/done\",\n      },\n      (res) => res.parsedBody\n    );\n  }\n\n  /**\n   * Deletes the results of all completed async jobs created before the given\n   * threshold.\n   *\n   * @param threshold - The expiration timestamp in milliseconds.\n   *\n   * @example\n   * ```js\n   * const db = new Database();\n   * const ONE_WEEK = 7 * 24 * 60 * 60 * 1000;\n   * await db.deleteExpiredJobResults(Date.now() - ONE_WEEK);\n   * // all job results older than a week have been deleted\n   * ```\n   */\n  deleteExpiredJobResults(threshold: number): Promise<void> {\n    return this.request(\n      {\n        method: \"DELETE\",\n        pathname: `/_api/job/expired`,\n        search: { stamp: threshold / 1000 },\n      },\n      () => undefined\n    );\n  }\n\n  /**\n   * Deletes the results of all completed async jobs.\n   */\n  deleteAllJobResults(): Promise<void> {\n    return this.request(\n      {\n        method: \"DELETE\",\n        pathname: `/_api/job/all`,\n      },\n      () => undefined\n    );\n  }\n  //#endregion\n}\n//#endregion\n"]}