{"version":3,"file":"connection.js","sourceRoot":"","sources":["../../src/connection.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * ```ts\n * import type { ArangoApiResponse } from \"arangojs/connection\";\n * ```\n *\n * The \"connection\" module provides connection related types for TypeScript.\n *\n * @packageDocumentation\n */\nimport * as administration from \"./administration.js\";\nimport * as configuration from \"./configuration.js\";\nimport * as databases from \"./databases.js\";\nimport * as errors from \"./errors.js\";\nimport { ERROR_ARANGO_CONFLICT } from \"./lib/codes.js\";\nimport * as util from \"./lib/util.js\";\nimport { LinkedList } from \"./lib/x3-linkedlist.js\";\n\nconst MIME_JSON = /\\/(json|javascript)(\\W|$)/;\nconst LEADER_ENDPOINT_HEADER = \"x-arango-endpoint\";\nconst REASON_TIMEOUT = \"timeout\";\n\n//#region Host\n/**\n * @internal\n */\ntype Host = {\n  /**\n   * @internal\n   *\n   * Perform a fetch request against this host.\n   *\n   * @param pathname - URL path, relative to the server URL.\n   * @param options - Options for this fetch request.\n   */\n  fetch: (\n    options: Omit<\n      RequestOptions,\n      | \"maxRetries\"\n      | \"retryOnConflict\"\n      | \"allowDirtyRead\"\n      | \"hostUrl\"\n      | \"expectBinary\"\n      | \"isBinary\"\n    >\n  ) => Promise<globalThis.Response & { request: globalThis.Request }>;\n  /**\n   * @internal\n   *\n   * Close the pending request, if any.\n   */\n  close: () => void;\n};\n\n/**\n * @internal\n *\n * Create a function for performing fetch requests against a given host.\n *\n * @param arangojsHostUrl - Base URL of the host, i.e. protocol, port and domain name.\n * @param options - Options to use for all fetch requests.\n */\nfunction createHost(arangojsHostUrl: string, agentOptions?: any): Host {\n  const baseUrl = new URL(arangojsHostUrl);\n  let fetch = globalThis.fetch;\n  let createDispatcher: (() => Promise<any>) | undefined;\n  let dispatcher: any;\n  let socketPath: string | undefined;\n  if (arangojsHostUrl.match(/^\\w+:\\/\\/unix:\\//)) {\n    socketPath = baseUrl.pathname;\n    baseUrl.hostname = \"localhost\";\n    baseUrl.pathname = \"/\";\n    agentOptions = {\n      ...agentOptions,\n      connect: {\n        ...agentOptions?.connect,\n        socketPath,\n      },\n    };\n  }\n  if (agentOptions) {\n    createDispatcher = async () => {\n      let undici: any;\n      try {\n        // Prevent overzealous bundlers from attempting to bundle undici\n        const undiciName = \"undici\";\n        undici = await import(undiciName);\n      } catch (cause) {\n        if (socketPath) {\n          throw new Error(\"Undici is required for Unix domain sockets\", {\n            cause,\n          });\n        }\n        throw new Error(\"Undici is required when using config.agentOptions\", {\n          cause,\n        });\n      }\n      fetch = undici.fetch;\n      return new undici.Agent(agentOptions);\n    };\n  }\n  const pending = new Map<string, AbortController>();\n  return {\n    async fetch({\n      method,\n      pathname,\n      search,\n      headers: requestHeaders,\n      body,\n      timeout,\n      fetchOptions,\n      beforeRequest,\n      afterResponse,\n    }: Omit<\n      RequestOptions,\n      | \"maxRetries\"\n      | \"retryOnConflict\"\n      | \"allowDirtyRead\"\n      | \"hostUrl\"\n      | \"expectBinary\"\n      | \"isBinary\"\n    >) {\n      const url = new URL(pathname + baseUrl.search, baseUrl);\n      if (search) {\n        const searchParams =\n          search instanceof URLSearchParams\n            ? search\n            : new URLSearchParams(search);\n        for (const [key, value] of searchParams) {\n          url.searchParams.append(key, value);\n        }\n      }\n      const headers = new Headers(requestHeaders);\n      if (!headers.has(\"authorization\")) {\n        headers.set(\n          \"authorization\",\n          `Basic ${btoa(\n            `${baseUrl.username || \"root\"}:${baseUrl.password || \"\"}`\n          )}`\n        );\n      }\n      const abortController = new AbortController();\n      const signal = abortController.signal;\n      if (createDispatcher) {\n        dispatcher = await createDispatcher();\n        createDispatcher = undefined;\n      }\n      const request = new Request(url, {\n        ...fetchOptions,\n        dispatcher,\n        method,\n        headers,\n        body,\n        signal,\n      } as globalThis.RequestInit);\n      if (beforeRequest) {\n        const p = beforeRequest(request);\n        if (p instanceof Promise) await p;\n      }\n      const requestId = util.generateRequestId();\n      pending.set(requestId, abortController);\n      let clearTimer: (() => void) | undefined;\n      if (timeout) {\n        clearTimer = util.createTimer(timeout, () => {\n          clearTimer = undefined;\n          abortController.abort(REASON_TIMEOUT);\n        });\n      }\n      let response: globalThis.Response & { request: globalThis.Request };\n      try {\n        response = Object.assign(await fetch(request), {\n          request,\n          arangojsHostUrl,\n        });\n        if (fetchOptions?.redirect === \"manual\" && isRedirect(response)) {\n          throw new errors.HttpError(response);\n        }\n      } catch (e: unknown) {\n        const cause = e instanceof Error ? e : new Error(String(e));\n        let error: errors.NetworkError;\n        if (cause instanceof errors.NetworkError) {\n          error = cause;\n        } else if (signal.aborted) {\n          const reason =\n            typeof signal.reason == \"string\" ? signal.reason : undefined;\n          if (reason === REASON_TIMEOUT) {\n            error = new errors.ResponseTimeoutError(undefined, request, {\n              cause,\n            });\n          } else {\n            error = new errors.RequestAbortedError(reason, request, { cause });\n          }\n        } else if (cause instanceof TypeError) {\n          error = new errors.FetchFailedError(undefined, request, { cause });\n        } else {\n          error = new errors.NetworkError(cause.message, request, { cause });\n        }\n        if (afterResponse) {\n          const p = afterResponse(error);\n          if (p instanceof Promise) await p;\n        }\n        throw error;\n      } finally {\n        clearTimer?.();\n        pending.delete(requestId);\n      }\n      if (afterResponse) {\n        const p = afterResponse(null, response);\n        if (p instanceof Promise) await p;\n      }\n      return response;\n    },\n    close() {\n      if (!pending.size) return;\n      const controllers = [...pending.values()];\n      pending.clear();\n      for (const controller of controllers) {\n        try {\n          controller.abort();\n        } catch (e) {\n          // noop\n        }\n      }\n    },\n  };\n}\n//#endregion\n\n//#region Response types\nconst STATUS_CODE_DEFAULT_MESSAGES = {\n  0: \"Network Error\",\n  300: \"Multiple Choices\",\n  301: \"Moved Permanently\",\n  302: \"Found\",\n  303: \"See Other\",\n  304: \"Not Modified\",\n  307: \"Temporary Redirect\",\n  308: \"Permanent Redirect\",\n  400: \"Bad Request\",\n  401: \"Unauthorized\",\n  402: \"Payment Required\",\n  403: \"Forbidden\",\n  404: \"Not Found\",\n  405: \"Method Not Allowed\",\n  406: \"Not Acceptable\",\n  407: \"Proxy Authentication Required\",\n  408: \"Request Timeout\",\n  409: \"Conflict\",\n  410: \"Gone\",\n  411: \"Length Required\",\n  412: \"Precondition Failed\",\n  413: \"Payload Too Large\",\n  414: \"Request-URI Too Long\",\n  415: \"Unsupported Media Type\",\n  416: \"Requested Range Not Satisfiable\",\n  417: \"Expectation Failed\",\n  418: \"I'm a teapot\",\n  421: \"Misdirected Request\",\n  422: \"Unprocessable Entity\",\n  423: \"Locked\",\n  424: \"Failed Dependency\",\n  426: \"Upgrade Required\",\n  428: \"Precondition Required\",\n  429: \"Too Many Requests\",\n  431: \"Request Header Fields Too Large\",\n  444: \"Connection Closed Without Response\",\n  451: \"Unavailable For Legal Reasons\",\n  499: \"Client Closed Request\",\n  500: \"Internal Server Error\",\n  501: \"Not Implemented\",\n  502: \"Bad Gateway\",\n  503: \"Service Unavailable\",\n  504: \"Gateway Timeout\",\n  505: \"HTTP Version Not Supported\",\n  506: \"Variant Also Negotiates\",\n  507: \"Insufficient Storage\",\n  508: \"Loop Detected\",\n  510: \"Not Extended\",\n  511: \"Network Authentication Required\",\n  599: \"Network Connect Timeout Error\",\n};\n\ntype KnownStatusCode = keyof typeof STATUS_CODE_DEFAULT_MESSAGES;\nconst KNOWN_STATUS_CODES = Object.keys(STATUS_CODE_DEFAULT_MESSAGES).map((k) =>\n  Number(k)\n) as KnownStatusCode[];\nconst REDIRECT_CODES = [301, 302, 303, 307, 308] satisfies KnownStatusCode[];\ntype RedirectStatusCode = (typeof REDIRECT_CODES)[number];\n\n/**\n * @internal\n *\n * Indicates whether the given status code can be translated to a known status\n * message.\n */\nfunction isKnownStatusCode(code: number): code is KnownStatusCode {\n  return KNOWN_STATUS_CODES.includes(code as KnownStatusCode);\n}\n\n/**\n * @internal\n *\n * Indicates whether the given status code represents a redirect.\n */\nfunction isRedirect(response: ProcessedResponse): boolean {\n  return REDIRECT_CODES.includes(response.status as RedirectStatusCode);\n}\n\n/**\n * Returns the status message for the given response's status code or the\n * status text of the response.\n */\nexport function getStatusMessage(response: ProcessedResponse): string {\n  if (isKnownStatusCode(response.status)) {\n    return STATUS_CODE_DEFAULT_MESSAGES[response.status];\n  }\n  if (response.statusText) return response.statusText;\n  return \"Unknown response status\";\n}\n\n/**\n * Generic properties shared by all ArangoDB HTTP API responses.\n */\nexport type ArangoResponseMetadata = {\n  /**\n   * Indicates that the request was successful.\n   */\n  error: false;\n  /**\n   * Response status code, typically `200`.\n   */\n  code: number;\n};\n\n/**\n * Extends the given base type `T` with the generic HTTP API response properties.\n */\nexport type ArangoApiResponse<T> = T & ArangoResponseMetadata;\n\n/**\n * Indicates whether the given value represents an ArangoDB error response.\n */\nexport function isArangoErrorResponse(\n  body: unknown\n): body is ArangoErrorResponse {\n  if (!body || typeof body !== \"object\") return false;\n  const obj = body as Record<string, unknown>;\n  return (\n    obj.error === true &&\n    typeof obj.errorMessage === \"string\" &&\n    typeof obj.errorNum === \"number\" &&\n    (obj.code === undefined || typeof obj.code === \"number\")\n  );\n}\n\n/**\n * Interface representing an ArangoDB error response.\n */\nexport type ArangoErrorResponse = {\n  /**\n   * Indicates that the request resulted in an error.\n   */\n  error: true;\n  /**\n   * Intended response status code as provided in the response body.\n   */\n  code?: number;\n  /**\n   * Error message as provided in the response body.\n   */\n  errorMessage: string;\n  /**\n   * ArangoDB error code as provided in the response body.\n   *\n   * See the [ArangoDB error documentation](https://docs.arangodb.com/stable/develop/error-codes-and-meanings/)\n   * for more information.\n   */\n  errorNum: number;\n};\n\n/**\n * Processed response object.\n */\nexport interface ProcessedResponse<T = any> extends globalThis.Response {\n  /**\n   * @internal\n   *\n   * Identifier of the ArangoDB host that served this request.\n   */\n  arangojsHostUrl?: string;\n  /**\n   * Fetch request object.\n   */\n  request: globalThis.Request;\n  /**\n   * Parsed response body.\n   */\n  parsedBody?: T;\n}\n//#endregion\n\n//#region Request options\n/**\n * Options available for requests made with the Fetch API.\n */\nexport type CommonFetchOptions = {\n  /**\n   * Headers object containing any additional headers to send with the request.\n   *\n   * Note that the `Authorization` header will be overridden if the `auth`\n   * configuration option is set.\n   */\n  headers?:\n    | string[][]\n    | Record<string, string | ReadonlyArray<string>>\n    | Headers;\n  /**\n   * Controls whether the socket should be reused for subsequent requests.\n   *\n   * Default: `false`\n   */\n  keepalive?: boolean;\n  /**\n   * Controls what to do when the response status code is a redirect.\n   *\n   * - `\"error\"`: Abort with a network error.\n   * - `\"follow\"`: Automatically follow redirects.\n   * - `\"manual\"`: Abort with an `HttpError`.\n   *\n   * Default: `\"follow\"`\n   */\n  redirect?: \"error\" | \"follow\" | \"manual\";\n  /**\n   * Value to use for the `Referer` header.\n   *\n   * If set to `\"about:client\"`, the default value for the context in which the\n   * request is made will be used.\n   *\n   * Default: `\"about:client\"`\n   */\n  referrer?: string;\n  /**\n   * (Browser only.) Controls the Attribution Reporting API specific behavior.\n   *\n   * See the [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/RequestInit)\n   * for more information on the available options.\n   */\n  attributionReporting?: any;\n  /**\n   * (Browser only.) Cache mode to use for the request.\n   *\n   * See [the Fetch API specification](https://fetch.spec.whatwg.org/#request-class)\n   * or the [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/RequestInit)\n   * for more information on the available options.\n   */\n  cache?: string;\n  /**\n   * (Browser only.) Controls sending of credentials and cookies.\n   *\n   * - `\"omit\"`: Never send cookies.\n   * - `\"include\"`: Always send cookies.\n   * - `\"same-origin\"`: Only send cookies if the request is to the same origin.\n   *\n   * Default: `\"same-origin\"`\n   */\n  credentials?: \"omit\" | \"include\" | \"same-origin\";\n  /**\n   * (Node.js only.) Undici `Dispatcher` instance to use for the request.\n   *\n   * Defaults to the global dispatcher.\n   */\n  dispatcher?: any;\n  /**\n   * (Browser only.) Sets cross-origin behavior for the request.\n   *\n   * See [the Fetch API specification](https://fetch.spec.whatwg.org/#request-class)\n   * or the [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/RequestInit)\n   * for more information on the available options.\n   *\n   * Default: `\"cors\"`\n   */\n  mode?: string;\n  /**\n   * (Browser only.) Request priority relative to other requests of the same type.\n   *\n   * See [the Fetch API specification](https://fetch.spec.whatwg.org/#request-class)\n   * or the [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/RequestInit)\n   * for more information on the available options.\n   *\n   * Default: `\"auto\"`\n   */\n  priority?: \"low\" | \"high\" | \"auto\";\n  /**\n   * (Browser only.) Policy to use for the `Referer` header, equivalent to the\n   * semantics of the `Referrer-Policy` header.\n   *\n   * See [the Fetch API specification](https://fetch.spec.whatwg.org/#request-class)\n   * or the [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/RequestInit)\n   * for more information on the available options.\n   */\n  referrerPolicy?: string;\n};\n\n/**\n * Fetch-specific options for performing a request with arangojs.\n */\nexport type FetchOptions = CommonFetchOptions & {\n  /**\n   * Subresource integrity value to use for the request, formatted as\n   * `<hash-algorithm>-<hash-source>`.\n   */\n  integrity?: `${string}-${string}`;\n};\n\n/**\n * Options that can be shared globally for all requests made with arangojs.\n */\nexport type CommonRequestOptions = {\n  /**\n   * Determines the behavior when a request fails because the underlying\n   * connection to the server could not be opened\n   * (e.g. [`ECONNREFUSED` in Node.js](https://nodejs.org/api/errors.html#errors_common_system_errors)):\n   *\n   * - `false`: the request fails immediately.\n   *\n   * - `0`: the request is retried until a server can be reached but only a\n   *   total number of times matching the number of known servers (including\n   *   the initial failed request).\n   *\n   * - any other number: the request is retried until a server can be reached\n   *   or the request has been retried a total of `maxRetries` number of times\n   *   (not including the initial failed request).\n   *\n   * When working with a single server, the retries (if any) will be made to\n   * the same server.\n   *\n   * This setting currently has no effect when using arangojs in a browser.\n   *\n   * **Note**: Requests bound to a specific server (e.g. fetching query results)\n   * will never be retried automatically and ignore this setting.\n   *\n   * **Note**: To set the number of retries when a write-write conflict is\n   * encountered, see `retryOnConflict` instead.\n   *\n   * Default: `0`\n   */\n  maxRetries?: false | number;\n  /**\n   * If set to a positive number, requests will automatically be retried at\n   * most this many times if they result in a write-write conflict.\n   *\n   * Default: `0`\n   */\n  retryOnConflict?: number;\n  /**\n   * Time in milliseconds after which arangojs will abort the request if the\n   * socket has not already timed out.\n   */\n  timeout?: number;\n  /**\n   * Whether ArangoDB is allowed to perform a dirty read to respond to the\n   * request. If set to `true`, the response may reflect a dirty state from\n   * a non-authoritative server.\n   *\n   * Default: `false`\n   */\n  allowDirtyRead?: boolean;\n  /**\n   * Callback that will be invoked with the finished request object before it\n   * is finalized. In the browser the request may already have been sent.\n   *\n   * @param req - Request object or XHR instance used for this request.\n   */\n  beforeRequest?: (req: globalThis.Request) => void | Promise<void>;\n  /**\n   * Callback that will be invoked when the server response has been received\n   * and processed or when the request has been failed without a response.\n   *\n   * The originating request will be available as the `request` property\n   * on either the error or response object.\n   *\n   * @param err - Error encountered when handling this request or `null`.\n   * @param res - Response object for this request, if no error occurred.\n   */\n  afterResponse?: (\n    err: errors.NetworkError | null,\n    res?: globalThis.Response & { request: globalThis.Request }\n  ) => void | Promise<void>;\n};\n\n/**\n * Options for performing a request with arangojs.\n */\nexport type RequestOptions = CommonRequestOptions & {\n  /**\n   * @internal\n   *\n   * Identifier of a specific ArangoDB host to use when more than one is known.\n   */\n  hostUrl?: string;\n  /**\n   * HTTP method to use in order to perform the request.\n   *\n   * Default: `\"GET\"`\n   */\n  method?: string;\n  /**\n   * URL path, relative to the server domain.\n   */\n  pathname?: string;\n  /**\n   * URL parameters to pass as part of the query string.\n   */\n  search?: URLSearchParams | Record<string, any>;\n  /**\n   * Headers object containing any additional headers to send with the request.\n   *\n   * Note that the `Authorization` header will be overridden if the `auth`\n   * configuration option is set.\n   */\n  headers?:\n    | string[][]\n    | Record<string, string | ReadonlyArray<string>>\n    | Headers;\n  /**\n   * Request body data.\n   */\n  body?: any;\n  /**\n   * Additional options to pass to the `fetch` function.\n   */\n  fetchOptions?: Omit<FetchOptions, \"headers\">;\n  /**\n   * If set to `true`, the request body will not be converted to JSON and\n   * instead passed as-is.\n   */\n  isBinary?: boolean;\n  /**\n   * If set to `true`, the response body will not be interpreted as JSON and\n   * instead passed as-is.\n   */\n  expectBinary?: boolean;\n};\n//#endregion\n\n//#region Connection class\n/**\n * @internal\n */\ntype Task<T = any> = {\n  stack?: () => string;\n  resolve: (result: T) => void;\n  reject: (error: unknown) => void;\n  transform?: (res: ProcessedResponse<any>) => T;\n  retries: number;\n  conflicts: number;\n  options: RequestOptions;\n};\n\n/**\n * Indicates whether the given value represents a {@link Connection}.\n *\n * @param connection - A value that might be a connection.\n *\n * @internal\n */\nexport function isArangoConnection(connection: any): connection is Connection {\n  return Boolean(connection && connection.isArangoConnection);\n}\n\n/**\n * Represents a connection pool shared by one or more databases.\n *\n * @internal\n */\nexport class Connection {\n  protected _activeTasks: number = 0;\n  protected _arangoVersion: number;\n  protected _loadBalancingStrategy: configuration.LoadBalancingStrategy;\n  protected _taskPoolSize: number;\n  protected _commonRequestOptions: CommonRequestOptions;\n  protected _commonFetchOptions: CommonFetchOptions & { headers: Headers };\n  protected _queue = new LinkedList<Task>();\n  protected _databases = new Map<string, databases.Database>();\n  protected _hosts: Host[] = [];\n  protected _hostUrls: string[] = [];\n  protected _activeHostUrl: string;\n  protected _activeDirtyHostUrl: string;\n  protected _transactionId: string | null = null;\n  protected _onError?: (err: Error) => void | Promise<void>;\n  protected _precaptureStackTraces: boolean;\n  protected _queueTimes = new LinkedList<[number, number]>();\n  protected _responseQueueTimeSamples: number;\n\n  /**\n   * @internal\n   *\n   * Creates a new `Connection` instance.\n   *\n   * @param config - An object with configuration options.\n   *\n   */\n  constructor(config: Omit<configuration.ConfigOptions, \"databaseName\"> = {}) {\n    const {\n      url = \"http://127.0.0.1:8529\",\n      auth,\n      arangoVersion = 31100,\n      loadBalancingStrategy = \"NONE\",\n      maxRetries = 0,\n      poolSize = 3 *\n        (loadBalancingStrategy === \"ROUND_ROBIN\" && Array.isArray(url)\n          ? url.length\n          : 1),\n      fetchOptions: { headers, ...commonFetchOptions } = {},\n      onError,\n      precaptureStackTraces = false,\n      responseQueueTimeSamples = 10,\n      ...commonRequestOptions\n    } = config;\n    const URLS = Array.isArray(url) ? url : [url];\n    this._loadBalancingStrategy = loadBalancingStrategy;\n    this._precaptureStackTraces = precaptureStackTraces;\n    this._responseQueueTimeSamples =\n      responseQueueTimeSamples < 0 ? Infinity : responseQueueTimeSamples;\n    this._arangoVersion = arangoVersion;\n    this._taskPoolSize = poolSize;\n    this._onError = onError;\n\n    this._commonRequestOptions = commonRequestOptions;\n    this._commonFetchOptions = {\n      headers: new Headers(headers),\n      ...commonFetchOptions,\n    };\n\n    this._commonFetchOptions.headers.set(\n      \"x-arango-version\",\n      String(arangoVersion)\n    );\n    this._commonFetchOptions.headers.set(\n      \"x-arango-driver\",\n      `arangojs/${process.env.ARANGOJS_VERSION} (cloud)`\n    );\n\n    this.addToHostList(URLS);\n\n    if (auth) {\n      if (configuration.isBearerAuth(auth)) {\n        this.setBearerAuth(auth);\n      } else {\n        this.setBasicAuth(auth);\n      }\n    }\n\n    if (this._loadBalancingStrategy === \"ONE_RANDOM\") {\n      this._activeHostUrl =\n        this._hostUrls[Math.floor(Math.random() * this._hostUrls.length)];\n      this._activeDirtyHostUrl =\n        this._hostUrls[Math.floor(Math.random() * this._hostUrls.length)];\n    } else {\n      this._activeHostUrl = this._hostUrls[0];\n      this._activeDirtyHostUrl = this._hostUrls[0];\n    }\n  }\n\n  /**\n   * @internal\n   *\n   * Indicates that this object represents an ArangoDB connection.\n   */\n  get isArangoConnection(): true {\n    return true;\n  }\n\n  get queueTime(): administration.QueueTimeMetrics {\n    return {\n      getLatest: () => this._queueTimes.last?.value[1],\n      getValues: () => Array.from(this._queueTimes.values()),\n      getAvg: () => {\n        let avg = 0;\n        for (const [, [, value]] of this._queueTimes) {\n          avg += value / this._queueTimes.length;\n        }\n        return avg;\n      },\n    };\n  }\n\n  protected async _runQueue() {\n    if (this._activeTasks >= this._taskPoolSize) return;\n    const task = this._queue.shift();\n    if (!task) return;\n    let hostUrl = this._activeHostUrl;\n    try {\n      this._activeTasks += 1;\n      if (task.options.hostUrl !== undefined) {\n        hostUrl = task.options.hostUrl;\n      } else if (task.options.allowDirtyRead) {\n        hostUrl = this._activeDirtyHostUrl;\n        const i = this._hostUrls.indexOf(this._activeDirtyHostUrl) + 1;\n        this._activeDirtyHostUrl = this._hostUrls[i % this._hostUrls.length];\n      } else if (this._loadBalancingStrategy === \"ROUND_ROBIN\") {\n        const i = this._hostUrls.indexOf(this._activeHostUrl) + 1;\n        this._activeHostUrl = this._hostUrls[i % this._hostUrls.length];\n      }\n      const host = this._hosts[this._hostUrls.indexOf(hostUrl)];\n      const res: globalThis.Response & {\n        request: globalThis.Request;\n        arangojsHostUrl: string;\n        parsedBody?: any;\n      } = Object.assign(await host.fetch(task.options), {\n        arangojsHostUrl: hostUrl,\n      });\n      const leaderEndpoint = res.headers.get(LEADER_ENDPOINT_HEADER);\n      if (res.status === 503 && leaderEndpoint) {\n        const [cleanUrl] = this.addToHostList(leaderEndpoint);\n        task.options.hostUrl = cleanUrl;\n        if (this._activeHostUrl === hostUrl) {\n          this._activeHostUrl = cleanUrl;\n        }\n        this._queue.push(task);\n        return;\n      }\n      const queueTime = res.headers.get(\"x-arango-queue-time-seconds\");\n      if (queueTime) {\n        this._queueTimes.push([Date.now(), Number(queueTime)]);\n        while (this._responseQueueTimeSamples < this._queueTimes.length) {\n          this._queueTimes.shift();\n        }\n      }\n      const contentType = res.headers.get(\"content-type\");\n      if (res.status >= 400) {\n        if (contentType?.match(MIME_JSON)) {\n          const errorResponse = res.clone();\n          let errorBody: any;\n          try {\n            errorBody = await errorResponse.json();\n          } catch {\n            // noop\n          }\n          if (isArangoErrorResponse(errorBody)) {\n            res.parsedBody = errorBody;\n            throw errors.ArangoError.from(res);\n          }\n        }\n        throw new errors.HttpError(res);\n      }\n      if (res.body) {\n        if (task.options.expectBinary) {\n          res.parsedBody = await res.blob();\n        } else if (contentType?.match(MIME_JSON)) {\n          res.parsedBody = await res.json();\n        } else {\n          res.parsedBody = await res.text();\n        }\n      }\n      let result: any = res;\n      if (task.transform) result = task.transform(res);\n      task.resolve(result);\n    } catch (e: unknown) {\n      const err = e as Error;\n      if (\n        !task.options.allowDirtyRead &&\n        this._hosts.length > 1 &&\n        this._activeHostUrl === hostUrl &&\n        this._loadBalancingStrategy !== \"ROUND_ROBIN\"\n      ) {\n        const i = this._hostUrls.indexOf(this._activeHostUrl) + 1;\n        this._activeHostUrl = this._hostUrls[i % this._hostUrls.length];\n      }\n      if (\n        errors.isArangoError(err) &&\n        err.errorNum === ERROR_ARANGO_CONFLICT &&\n        task.options.retryOnConflict &&\n        task.conflicts < task.options.retryOnConflict\n      ) {\n        task.conflicts += 1;\n        this._queue.push(task);\n        return;\n      }\n      if (\n        (errors.isNetworkError(err) || errors.isArangoError(err)) &&\n        err.isSafeToRetry &&\n        task.options.hostUrl === undefined &&\n        this._commonRequestOptions.maxRetries !== false &&\n        task.retries <\n          (this._commonRequestOptions.maxRetries || this._hosts.length - 1)\n      ) {\n        task.retries += 1;\n        this._queue.push(task);\n        return;\n      }\n      if (task.stack) {\n        err.stack += task.stack();\n      }\n      if (this._onError) {\n        try {\n          const p = this._onError(err);\n          if (p instanceof Promise) await p;\n        } catch (e) {\n          (e as Error).cause = err;\n          task.reject(e);\n          return;\n        }\n      }\n      task.reject(err);\n    } finally {\n      this._activeTasks -= 1;\n      setTimeout(() => this._runQueue(), 0);\n    }\n  }\n\n  setBearerAuth(auth: configuration.BearerAuthCredentials) {\n    this.setHeader(\"authorization\", `Bearer ${auth.token}`);\n  }\n\n  setBasicAuth(auth: configuration.BasicAuthCredentials) {\n    this.setHeader(\n      \"authorization\",\n      `Basic ${btoa(`${auth.username}:${auth.password}`)}`\n    );\n  }\n\n  setResponseQueueTimeSamples(responseQueueTimeSamples: number) {\n    if (responseQueueTimeSamples < 0) {\n      responseQueueTimeSamples = Infinity;\n    }\n    this._responseQueueTimeSamples = responseQueueTimeSamples;\n    while (this._responseQueueTimeSamples < this._queueTimes.length) {\n      this._queueTimes.shift();\n    }\n  }\n\n  /**\n   * @internal\n   *\n   * Fetches a {@link databases.Database} instance for the given database name from the\n   * internal cache, if available.\n   *\n   * @param databaseName - Name of the database.\n   */\n  database(databaseName: string): databases.Database | undefined;\n  /**\n   * @internal\n   *\n   * Adds a {@link databases.Database} instance for the given database name to the\n   * internal cache.\n   *\n   * @param databaseName - Name of the database.\n   * @param database - Database instance to add to the cache.\n   */\n  database(\n    databaseName: string,\n    database: databases.Database\n  ): databases.Database;\n  /**\n   * @internal\n   *\n   * Clears any {@link databases.Database} instance stored for the given database name\n   * from the internal cache, if present.\n   *\n   * @param databaseName - Name of the database.\n   * @param database - Must be `null`.\n   */\n  database(databaseName: string, database: null): undefined;\n  database(\n    databaseName: string,\n    database?: databases.Database | null\n  ): databases.Database | undefined {\n    if (database === null) {\n      this._databases.delete(databaseName);\n      return undefined;\n    }\n    if (!database) {\n      return this._databases.get(databaseName);\n    }\n    this._databases.set(databaseName, database);\n    return database;\n  }\n\n  /**\n   * @internal\n   *\n   * Replaces the host list with the given URLs.\n   *\n   * See {@link Connection#acquireHostList}.\n   *\n   * @param urls - URLs to use as host list.\n   */\n  setHostList(urls: string[]): void {\n    const cleanUrls = urls.map((url) => util.normalizeUrl(url));\n    this._hosts.splice(\n      0,\n      this._hosts.length,\n      ...cleanUrls.map((url) => {\n        const i = this._hostUrls.indexOf(url);\n        if (i !== -1) return this._hosts[i];\n        return createHost(url);\n      })\n    );\n    this._hostUrls.splice(0, this._hostUrls.length, ...cleanUrls);\n  }\n\n  /**\n   * @internal\n   *\n   * Adds the given URL or URLs to the host list.\n   *\n   * See {@link Connection#acquireHostList}.\n   *\n   * @param urls - URL or URLs to add.\n   */\n  addToHostList(urls: string | string[]): string[] {\n    const cleanUrls = (Array.isArray(urls) ? urls : [urls]).map((url) =>\n      util.normalizeUrl(url)\n    );\n    const newUrls = cleanUrls.filter(\n      (url) => this._hostUrls.indexOf(url) === -1\n    );\n    this._hostUrls.push(...newUrls);\n    this._hosts.push(...newUrls.map((url) => createHost(url)));\n    return cleanUrls;\n  }\n\n  /**\n   * @internal\n   *\n   * Sets the connection's active `transactionId`.\n   *\n   * While set, all requests will use this ID, ensuring the requests are executed\n   * within the transaction if possible. Setting the ID manually may cause\n   * unexpected behavior.\n   *\n   * See also {@link Connection#clearTransactionId}.\n   *\n   * @param transactionId - ID of the active transaction.\n   */\n  setTransactionId(transactionId: string) {\n    this._transactionId = transactionId;\n  }\n\n  /**\n   * @internal\n   *\n   * Clears the connection's active `transactionId`.\n   */\n  clearTransactionId() {\n    this._transactionId = null;\n  }\n\n  /**\n   * @internal\n   *\n   * Sets the header `headerName` with the given `value` or clears the header if\n   * `value` is `null`.\n   *\n   * @param headerName - Name of the header to set.\n   * @param value - Value of the header.\n   */\n  setHeader(headerName: string, value: string | null) {\n    if (value === null) {\n      this._commonFetchOptions.headers.delete(headerName);\n    } else {\n      this._commonFetchOptions.headers.set(headerName, value);\n    }\n  }\n\n  /**\n   * @internal\n   *\n   * Closes all open connections.\n   *\n   * See {@link databases.Database#close}.\n   */\n  close() {\n    for (const host of this._hosts) {\n      if (host.close) host.close();\n    }\n  }\n\n  /**\n   * @internal\n   *\n   * Waits for propagation.\n   *\n   * See {@link databases.Database#waitForPropagation}.\n   *\n   * @param request - Request to perform against each coordinator.\n   * @param timeout - Maximum number of milliseconds to wait for propagation.\n   */\n  async waitForPropagation(request: RequestOptions, timeout = Infinity) {\n    const numHosts = this._hosts.length;\n    const propagated = [] as string[];\n    const started = Date.now();\n    const endOfTime = started + timeout;\n    let index = 0;\n    while (true) {\n      if (propagated.length === numHosts) {\n        return;\n      }\n      while (propagated.includes(this._hostUrls[index])) {\n        index = (index + 1) % numHosts;\n      }\n      const hostUrl = this._hostUrls[index];\n      try {\n        await this.request({\n          ...request,\n          hostUrl,\n          timeout: endOfTime - Date.now(),\n        });\n      } catch (e) {\n        if (endOfTime < Date.now()) {\n          throw new errors.PropagationTimeoutError(undefined, {\n            cause: e as Error,\n          });\n        }\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n        continue;\n      }\n      if (!propagated.includes(hostUrl)) {\n        propagated.push(hostUrl);\n      }\n    }\n  }\n\n  /**\n   * @internal\n   *\n   * Performs a request using the arangojs connection pool.\n   */\n  async request<\n    T = globalThis.Response & { request: globalThis.Request; parsedBody?: any },\n  >(\n    requestOptions: RequestOptions & { isBinary?: boolean },\n    transform?: (\n      res: globalThis.Response & {\n        request: globalThis.Request;\n        parsedBody?: any;\n      }\n    ) => T\n  ): Promise<T> {\n    const {\n      hostUrl,\n      allowDirtyRead = false,\n      isBinary = false,\n      maxRetries = 0,\n      method = \"GET\",\n      retryOnConflict = 0,\n      timeout = 0,\n      headers: requestHeaders,\n      body: requestBody,\n      fetchOptions,\n      ...taskOptions\n    } = { ...this._commonRequestOptions, ...requestOptions };\n\n    const headers = util.mergeHeaders(\n      this._commonFetchOptions.headers,\n      requestHeaders\n    );\n\n    let body = requestBody;\n    if (body instanceof FormData) {\n      const res = new Response(body);\n      const blob = await res.blob();\n      // Workaround for ArangoDB 3.12.0-rc1 and earlier:\n      // Omitting the final CRLF results in \"bad request body\" fatal error\n      body = new Blob([blob, \"\\r\\n\"], { type: blob.type });\n    } else if (body) {\n      let contentType;\n      if (isBinary) {\n        contentType = \"application/octet-stream\";\n      } else if (typeof body === \"object\") {\n        body = JSON.stringify(body);\n        contentType = \"application/json\";\n      } else {\n        body = String(body);\n        contentType = \"text/plain\";\n      }\n      if (!headers.has(\"content-type\")) {\n        headers.set(\"content-type\", contentType);\n      }\n    }\n\n    if (this._transactionId) {\n      headers.set(\"x-arango-trx-id\", this._transactionId);\n    }\n\n    if (allowDirtyRead) {\n      headers.set(\"x-arango-allow-dirty-read\", \"true\");\n    }\n\n    return new Promise((resolve, reject) => {\n      const task: Task = {\n        resolve,\n        reject,\n        transform,\n        retries: 0,\n        conflicts: 0,\n        options: {\n          ...taskOptions,\n          hostUrl,\n          method,\n          headers,\n          body,\n          allowDirtyRead,\n          retryOnConflict,\n          maxRetries,\n          fetchOptions,\n          timeout,\n        },\n      };\n\n      if (this._precaptureStackTraces) {\n        if (typeof Error.captureStackTrace === \"function\") {\n          const capture = {} as { readonly stack: string };\n          Error.captureStackTrace(capture);\n          task.stack = () =>\n            `\\n${capture.stack.split(\"\\n\").slice(3).join(\"\\n\")}`;\n        } else {\n          const capture = util.generateStackTrace() as {\n            readonly stack: string;\n          };\n          if (Object.prototype.hasOwnProperty.call(capture, \"stack\")) {\n            task.stack = () =>\n              `\\n${capture.stack.split(\"\\n\").slice(4).join(\"\\n\")}`;\n          }\n        }\n      }\n\n      this._queue.push(task);\n      this._runQueue();\n    });\n  }\n}\n//#endregion\n"]}