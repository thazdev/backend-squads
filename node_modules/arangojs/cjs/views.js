"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.View = exports.isArangoView = void 0;
const errors = __importStar(require("./errors.js"));
const codes_js_1 = require("./lib/codes.js");
//#endregion
//#region View class
/**
 * Indicates whether the given value represents a {@link View}.
 *
 * @param view - A value that might be a View.
 */
function isArangoView(view) {
    return Boolean(view && view.isArangoView);
}
exports.isArangoView = isArangoView;
// Note: Resist the urge to attempt to create separate ArangoSearchView
// and SearchAliasView classes or interfaces. The requirements for producing
// a meaningful typedoc documentation, providing a nice API in the `Database`
// class and having these as separate interfaces seem to be mutually
// incompatible.
/**
 * Represents a View in a {@link databases.Database}.
 */
class View {
    _name;
    _db;
    /**
     * @internal
     */
    constructor(db, name) {
        this._db = db;
        this._name = name;
    }
    /**
     * @internal
     *
     * Indicates that this object represents an ArangoDB View.
     */
    get isArangoView() {
        return true;
    }
    /**
     * Database this view belongs to.
     */
    get database() {
        return this._db;
    }
    /**
     * Name of the View.
     */
    get name() {
        return this._name;
    }
    /**
     * Retrieves general information about the View.
     *
     * @example
     * ```js
     * const db = new Database();
     * const view = db.view("some-view");
     * const data = await view.get();
     * // data contains general information about the View
     * ```
     */
    get() {
        return this._db.request({
            pathname: `/_api/view/${encodeURIComponent(this._name)}`,
        });
    }
    /**
     * Checks whether the View exists.
     *
     * @example
     * ```js
     * const db = new Database();
     * const view = db.view("some-view");
     * const exists = await view.exists();
     * console.log(exists); // indicates whether the View exists
     * ```
     */
    async exists() {
        try {
            await this.get();
            return true;
        }
        catch (err) {
            if (errors.isArangoError(err) && err.errorNum === codes_js_1.VIEW_NOT_FOUND) {
                return false;
            }
            throw err;
        }
    }
    /**
     * Creates a View with the given `options` and the instance's name.
     *
     * See also {@link databases.Database#createView}.
     *
     * @example
     * ```js
     * const db = new Database();
     * const view = db.view("potatoes");
     * await view.create();
     * // the ArangoSearch View "potatoes" now exists
     * ```
     */
    create(options) {
        return this._db.request({
            method: "POST",
            pathname: "/_api/view",
            body: {
                ...options,
                name: this._name,
            },
        });
    }
    /**
     * Renames the View and updates the instance's `name` to `newName`.
     *
     * Additionally removes the instance from the {@link databases.Database}'s
     * internal cache.
     *
     * **Note**: Renaming Views may not be supported when ArangoDB is
     * running in a cluster configuration.
     *
     * @param newName - The new name of the View.
     *
     * @example
     * ```js
     * const db = new Database();
     * const view1 = db.view("some-view");
     * await view1.rename("other-view");
     * const view2 = db.view("some-view");
     * const view3 = db.view("other-view");
     * // Note all three View instances are different objects but
     * // view1 and view3 represent the same ArangoDB view!
     * ```
     */
    async rename(newName) {
        const result = this._db.renameView(this._name, newName);
        this._name = newName;
        return result;
    }
    /**
     * Retrieves the View's properties.
     *
     * @example
     * ```js
     * const db = new Database();
     * const view = db.view("some-view");
     * const data = await view.properties();
     * // data contains the View's properties
     * ```
     */
    properties() {
        return this._db.request({
            pathname: `/_api/view/${encodeURIComponent(this._name)}/properties`,
        });
    }
    /**
     * Updates the properties of the View.
     *
     * @param properties - Properties of the View to update.
     *
     * @example
     * ```js
     * const db = new Database();
     * const view = db.view("some-view");
     * const result = await view.updateProperties({
     *   consolidationIntervalMsec: 234
     * });
     * console.log(result.consolidationIntervalMsec); // 234
     * ```
     */
    updateProperties(properties) {
        return this._db.request({
            method: "PATCH",
            pathname: `/_api/view/${encodeURIComponent(this._name)}/properties`,
            body: properties ?? {},
        });
    }
    /**
     * Replaces the properties of the View.
     *
     * @param properties - New properties of the View.
     *
     * @example
     * ```js
     * const db = new Database();
     * const view = db.view("some-view");
     * const result = await view.replaceProperties({
     *   consolidationIntervalMsec: 234
     * });
     * console.log(result.consolidationIntervalMsec); // 234
     * ```
     */
    replaceProperties(properties) {
        return this._db.request({
            method: "PUT",
            pathname: `/_api/view/${encodeURIComponent(this._name)}/properties`,
            body: properties ?? {},
        });
    }
    /**
     * Deletes the View from the database.
     *
     * @example
     *
     * ```js
     * const db = new Database();
     * const view = db.view("some-view");
     * await view.drop();
     * // the View "some-view" no longer exists
     * ```
     */
    drop() {
        return this._db.request({
            method: "DELETE",
            pathname: `/_api/view/${encodeURIComponent(this._name)}`,
        }, (res) => res.parsedBody.result);
    }
}
exports.View = View;
//#endregion
//# sourceMappingURL=views.js.map